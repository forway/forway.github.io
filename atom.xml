<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Recorder</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-04T13:17:28.909Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Forway</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spark-压缩和序列化相关</title>
    <link href="http://yoursite.com/2019/09/24/spark-%E5%8E%8B%E7%BC%A9%E5%92%8C%E5%BA%8F%E5%88%97%E5%8C%96%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2019/09/24/spark-压缩和序列化相关/</id>
    <published>2019-09-24T07:15:23.731Z</published>
    <updated>2016-08-04T13:17:28.909Z</updated>
    
    <content type="html"><![CDATA[<h3 id="压缩和序列化性能优化参数设置"><a href="#压缩和序列化性能优化参数设置" class="headerlink" title="压缩和序列化性能优化参数设置"></a>压缩和序列化性能优化参数设置</h3><h4 id="1-spark-serializer"><a href="#1-spark-serializer" class="headerlink" title="(1) spark.serializer"></a>(1) spark.serializer</h4><p>默认为org.apache.spark.serializer.JavaSerializer, 可选 org.apache.spark.serializer.KryoSerializer, 实际上只要是org.apache.spark.serializer的子类就可以了,不过如果只是应用,大概你不会自己去实现一个的。</p><a id="more"></a> <p>序列化对于spark应用的性能来说,还是有很大影响的,在特定的数据格式的情况下,KryoSerializer的性能可以达到JavaSerializer的10倍以上,当然放到整个Spark程序中来考量,比重就没有那么大了,但是以Wordcount为例，通常也很容易达到30%以上的性能提升。而对于一些Int之类的基本类型数据，性能的提升就几乎可以忽略了。KryoSerializer依赖Twitter的Chill库来实现，相对于JavaSerializer，主要的问题在于不是所有的Java Serializable对象都能支持。</p><p>需要注意的是，这里可配的Serializer针对的对象是Shuffle数据，以及RDD Cache等场合，而Spark Task的序列化是通过spark.closure.serializer来配置，但是目前只支持JavaSerializer，所以等于没法配置啦。</p><h4 id="2-spark-rdd-compress"><a href="#2-spark-rdd-compress" class="headerlink" title="(2) spark.rdd.compress"></a>(2) spark.rdd.compress</h4><p>这个参数决定了RDD Cache的过程中，RDD数据在序列化之后是否进一步进行压缩再储存到内存或磁盘上。当然是为了进一步减小Cache数据的尺寸，对于Cache在磁盘上而言，绝对大小大概没有太大关系，主要是考虑Disk的IO带宽。而对于Cache在内存中，那主要就是考虑尺寸的影响，是否能够Cache更多的数据，是否能减小Cache数据对GC造成的压力等。</p><p>这两者，前者通常不会是主要问题，尤其是在RDD Cache本身的目的就是追求速度，减少重算步骤，用IO换CPU的情况下。而后者，GC问题当然是需要考量的，数据量小，占用空间少，GC的问题大概会减轻，但是是否真的需要走到RDD Cache压缩这一步，或许用其它方式来解决可能更加有效。</p><p>所以这个值默认是关闭的，但是如果在磁盘IO的确成为问题或者GC问题真的没有其它更好的解决办法的时候，可以考虑启用RDD压缩。</p><h4 id="3-spark-broadcast-compress"><a href="#3-spark-broadcast-compress" class="headerlink" title="(3) spark.broadcast.compress"></a>(3) spark.broadcast.compress</h4><p>是否对Broadcast的数据进行压缩，默认值为True。</p><p>Broadcast机制是用来减少运行每个Task时，所需要发送给TASK的RDD所使用到的相关数据的尺寸，一个Executor只需要在第一个Task启动时，获得一份Broadcast数据，之后的Task都从本地的BlockManager中获取相关数据。在1.1最新版本的代码中，RDD本身也改为以Broadcast的形式发送给Executor（之前的实现RDD本身是随每个任务发送的），因此基本上不太需要显式的决定哪些数据需要broadcast了。</p><p>因为Broadcast的数据需要通过网络发送，而在Executor端又需要存储在本地BlockMananger中，加上最新的实现，默认RDD通过Boradcast机制发送，因此大大增加了Broadcast变量的比重，所以通过压缩减小尺寸，来减少网络传输开销和内存占用，通常都是有利于提高整体性能的。</p><p>什么情况可能不压缩更好呢，大致上个人觉得同样还是在网络带宽和内存不是问题的时候，如果Driver端CPU资源很成问题（毕竟压缩的动作基本都在Driver端执行），那或许有调整的必要。</p><h4 id="4-spark-io-compression-codec"><a href="#4-spark-io-compression-codec" class="headerlink" title="(4) spark.io.compression.codec"></a>(4) spark.io.compression.codec</h4><p>RDD Cache和Shuffle数据压缩所采用的算法Codec，默认值曾经是使用LZF作为默认Codec，最近因为LZF的内存开销的问题，默认的Codec已经改为Snappy。</p><p>LZF和Snappy相比较，前者压缩率比较高（当然要看具体数据内容了，通常要高20%左右），但是除了内存问题以外，CPU代价也大一些（大概也差20%~50%？）</p><p>在用于Shuffle数据的场合下，内存方面，应该主要是在使用HashShuffleManager的时候有可能成为问题，因为如果Reduce分区数量巨大，需要同时打开大量的压缩数据流用于写文件，进而在Codec方面需要大量的buffer。但是如果使用SortShuffleManager，由于shuffle文件数量大大减少，不会产生大量的压缩数据流，所以内存开销大概不会成为主要问题。</p><p>剩下的就是CPU和压缩率的权衡取舍，和前面一样，取决于CPU/网络/磁盘的能力和负载，个人认为CPU通常更容易成为瓶颈。所以要调整性能，要不不压缩，要不使用Snappy可能性大一些？</p><p>对于RDD Cache的场合来说，绝大多数场合都是内存操作或者本地IO，所以CPU负载的问题可能比IO的问题更加突出，这也是为什么 spark.rdd.compress 本身默认为不压缩，如果要压缩，大概也是Snappy合适一些？</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;压缩和序列化性能优化参数设置&quot;&gt;&lt;a href=&quot;#压缩和序列化性能优化参数设置&quot; class=&quot;headerlink&quot; title=&quot;压缩和序列化性能优化参数设置&quot;&gt;&lt;/a&gt;压缩和序列化性能优化参数设置&lt;/h3&gt;&lt;h4 id=&quot;1-spark-serializer&quot;&gt;&lt;a href=&quot;#1-spark-serializer&quot; class=&quot;headerlink&quot; title=&quot;(1) spark.serializer&quot;&gt;&lt;/a&gt;(1) spark.serializer&lt;/h4&gt;&lt;p&gt;默认为org.apache.spark.serializer.JavaSerializer, 可选 org.apache.spark.serializer.KryoSerializer, 实际上只要是org.apache.spark.serializer的子类就可以了,不过如果只是应用,大概你不会自己去实现一个的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="spark" scheme="http://yoursite.com/categories/spark/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>spark-编程常用例子（Java版）-1</title>
    <link href="http://yoursite.com/2019/09/24/spark-%E7%BC%96%E7%A8%8B%E5%B8%B8%E7%94%A8%E4%BE%8B%E5%AD%90%EF%BC%88Java%E7%89%88%EF%BC%89-1/"/>
    <id>http://yoursite.com/2019/09/24/spark-编程常用例子（Java版）-1/</id>
    <published>2019-09-24T07:15:23.729Z</published>
    <updated>2016-08-06T03:04:47.540Z</updated>
    
    <content type="html"><![CDATA[<p>在实际开发中，免不了要涉及到对数据分组、实时数据和历史数据匹配、处理后的结果需要保存到其它系统（ES,Redis,Mysql等）等，这里是对这三种情况简单实现的例子。</p><a id="more"></a> <h4 id="1-根据多个关键字分组"><a href="#1-根据多个关键字分组" class="headerlink" title="(1) 根据多个关键字分组"></a>(1) 根据多个关键字分组</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Map;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Set;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.SparkConf;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.streaming.Duration;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.streaming.api.java.JavaPairInputDStream;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.streaming.api.java.JavaStreamingContext;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.streaming.kafka.KafkaUtils;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> kafka.serializer.StringDecoder;</span><br><span class="line"><span class="hljs-keyword">import</span> scala.Tuple2;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * </span></span><br><span class="line"><span class="hljs-comment"> * 根据多个字段分组</span></span><br><span class="line"><span class="hljs-comment"> * 例子：统计每一天中同一个源IP对同一个目标IP的攻击次数</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GroupDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//2016-07-13 01:10:23 WARMING src_ip:192.1.1.100 dest_ip:10.1.1.2 attack_type:program virus infections</span></span><br><span class="line"><span class="hljs-comment">//正则拆出：day, src_ip, dest_ip</span></span><br><span class="line">String log_regs = <span class="hljs-string">"(\\d+-\\d+-\\d+)\\s\\d+:\\d+:\\d+\\s.*src_ip:(\\S+)\\sdest_ip:(\\S+)\\s.*"</span>;</span><br><span class="line">Pattern pattern = Pattern.compile(log_regs);</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; loginTopicsSet = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(<span class="hljs-string">"rest_topic"</span>.split(<span class="hljs-string">","</span>)));</span><br><span class="line">Map&lt;String, String&gt; kafkaParams = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        kafkaParams.put(<span class="hljs-string">"metadata.broker.list"</span>, <span class="hljs-string">"master:9092,slave1:9092"</span>);</span><br><span class="line">        kafkaParams.put(<span class="hljs-string">"group.id"</span>, <span class="hljs-string">"consummer1"</span>);</span><br><span class="line">        kafkaParams.put(<span class="hljs-string">"serializer.class"</span>, <span class="hljs-string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line"></span><br><span class="line">SparkConf sparkConf = <span class="hljs-keyword">new</span> SparkConf().setAppName(<span class="hljs-string">"WindowEventTriggerCard"</span>).setMaster(<span class="hljs-string">"local[2]"</span>);</span><br><span class="line">JavaStreamingContext jssc = <span class="hljs-keyword">new</span> JavaStreamingContext(sparkConf, <span class="hljs-keyword">new</span> Duration(<span class="hljs-number">10</span> * <span class="hljs-number">1000</span>));</span><br><span class="line">JavaPairInputDStream&lt;String, String&gt; logDstream  = KafkaUtils.createDirectStream(jssc, String.class,</span><br><span class="line">String.class, StringDecoder.class, StringDecoder.class, kafkaParams, loginTopicsSet);</span><br><span class="line"></span><br><span class="line">logDstream.filter(log -&gt; log._2.contains(<span class="hljs-string">"WARMING"</span>))</span><br><span class="line">.mapToPair(log -&gt; &#123;</span><br><span class="line"></span><br><span class="line">Matcher matcher = pattern.matcher(log._2);</span><br><span class="line">String day = <span class="hljs-keyword">null</span>;</span><br><span class="line">String src_ip = <span class="hljs-keyword">null</span>;</span><br><span class="line">String dest_ip = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(matcher.find()) &#123;</span><br><span class="line">day = matcher.group(<span class="hljs-number">1</span>);</span><br><span class="line">src_ip = matcher.group(<span class="hljs-number">2</span>);</span><br><span class="line">dest_ip = matcher.group(<span class="hljs-number">3</span>);</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">day = <span class="hljs-string">"not_matcher_user"</span>;</span><br><span class="line">src_ip = <span class="hljs-string">"not_matcher_src_ip"</span>;</span><br><span class="line">dest_ip = <span class="hljs-string">"not_matcher_dest_ip"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//把  day,src_ip,dest_ip作为key</span></span><br><span class="line">String key = day + <span class="hljs-string">","</span> + src_ip + <span class="hljs-string">","</span> + dest_ip;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Tuple2&lt;String, String&gt;(key, log._2);</span><br><span class="line">&#125;).groupByKey().print();</span><br><span class="line"></span><br><span class="line">jssc.start();</span><br><span class="line">jssc.awaitTermination();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-实时数据和历史数据匹配"><a href="#2-实时数据和历史数据匹配" class="headerlink" title="(2) 实时数据和历史数据匹配"></a>(2) 实时数据和历史数据匹配</h4><p>注意：获取历史数据时使用分区方式获取，如mapPartitions等</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">package</span> com.demo.hl;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.List;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Map;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Set;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.SparkConf;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.streaming.Duration;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.streaming.api.java.JavaPairInputDStream;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.streaming.api.java.JavaStreamingContext;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.streaming.kafka.KafkaUtils;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> kafka.serializer.StringDecoder;</span><br><span class="line"><span class="hljs-keyword">import</span> scala.Tuple2;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * </span></span><br><span class="line"><span class="hljs-comment"> * 实时数据和历史数据匹配操作</span></span><br><span class="line"><span class="hljs-comment"> * 建议：如果需要获取历史数据，先使用排程对历史数据预处理</span></span><br><span class="line"><span class="hljs-comment"> * 该场景也适用实时数据和随时变化的对照档匹配处理</span></span><br><span class="line"><span class="hljs-comment"> * 例子：实时接收用户登录数据，用户登录成功后，判断该用户前7天内是否登录且登录成功的记录，有的话属于正常，否则异常</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HistoryDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">////2016-07-13 01:10:11 admin login success</span></span><br><span class="line"><span class="hljs-comment">//正则拆出：time, user</span></span><br><span class="line">String log_regs = <span class="hljs-string">"(\\d+-\\d+-\\d+\\s\\d+:\\d+:\\d+)\\s(\\w+)\\s.*"</span>;</span><br><span class="line">Pattern pattern = Pattern.compile(log_regs);</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; loginTopicsSet = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(<span class="hljs-string">"rest_topic"</span>.split(<span class="hljs-string">","</span>)));</span><br><span class="line">Map&lt;String, String&gt; kafkaParams = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        kafkaParams.put(<span class="hljs-string">"metadata.broker.list"</span>, <span class="hljs-string">"master:9092,slave1:9092"</span>);</span><br><span class="line">        kafkaParams.put(<span class="hljs-string">"group.id"</span>, <span class="hljs-string">"consummer1"</span>);</span><br><span class="line">        kafkaParams.put(<span class="hljs-string">"serializer.class"</span>, <span class="hljs-string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line"></span><br><span class="line">SparkConf sparkConf = <span class="hljs-keyword">new</span> SparkConf().setAppName(<span class="hljs-string">"WindowEventTriggerCard"</span>).setMaster(<span class="hljs-string">"local[2]"</span>);</span><br><span class="line">JavaStreamingContext jssc = <span class="hljs-keyword">new</span> JavaStreamingContext(sparkConf, <span class="hljs-keyword">new</span> Duration(<span class="hljs-number">10</span> * <span class="hljs-number">1000</span>));</span><br><span class="line">JavaPairInputDStream&lt;String, String&gt; logDstream  = KafkaUtils.createDirectStream(jssc, String.class,</span><br><span class="line">String.class, StringDecoder.class, StringDecoder.class, kafkaParams, loginTopicsSet);</span><br><span class="line"></span><br><span class="line">logDstream.filter(log -&gt; log._2.contains(<span class="hljs-string">"login success"</span>))</span><br><span class="line">.mapToPair(log -&gt; &#123;</span><br><span class="line"></span><br><span class="line">Matcher matcher = pattern.matcher(log._2);</span><br><span class="line">String user = <span class="hljs-keyword">null</span>;</span><br><span class="line">user = matcher.find() ? matcher.group(<span class="hljs-number">2</span>) : <span class="hljs-string">"NULL-user"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Tuple2&lt;String, String&gt;(user, log._2);</span><br><span class="line">&#125;)</span><br><span class="line">.mapPartitions(log -&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//排程：每天处理前一天登录成功的记录，然后保存到redis，再把最早一天的数据清除</span></span><br><span class="line"><span class="hljs-comment">//只需保存用户名即可，如 : channel --&gt; 2016-07-14 : Set&lt;String&gt; users</span></span><br><span class="line"><span class="hljs-comment">//从redis获取前7天登录成功的用户</span></span><br><span class="line">List&lt;String&gt; users = <span class="hljs-keyword">null</span>;</span><br><span class="line"></span><br><span class="line">List&lt;Tuple2&lt;String,String&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Tuple2&lt;String,String&gt;&gt;();</span><br><span class="line">String flag = <span class="hljs-keyword">null</span>;</span><br><span class="line">Tuple2&lt;String,String&gt; tmp = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(log.hasNext()) &#123;</span><br><span class="line">tmp = log.next();</span><br><span class="line">flag = users.contains(tmp._1) ? <span class="hljs-string">"nice"</span> : <span class="hljs-string">"alert"</span>;</span><br><span class="line">list.add(<span class="hljs-keyword">new</span> Tuple2&lt;String,String&gt;(flag, tmp._2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> list;</span><br><span class="line">&#125;)</span><br><span class="line">.filter(log -&gt; log._1.equals(<span class="hljs-string">"alert"</span>)).print();</span><br><span class="line"></span><br><span class="line">jssc.start();</span><br><span class="line">jssc.awaitTermination();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-处理后的结果需要保存到其它系统（ES-Redis-Mysql等）"><a href="#3-处理后的结果需要保存到其它系统（ES-Redis-Mysql等）" class="headerlink" title="(3) 处理后的结果需要保存到其它系统（ES,Redis,Mysql等）"></a>(3) 处理后的结果需要保存到其它系统（ES,Redis,Mysql等）</h4><p>注意：往其它系统写数据时使用分区方式，如foreachPartition等</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">package</span> com.demo.hl;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Map;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Set;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.SparkConf;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.streaming.Duration;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.streaming.api.java.JavaPairInputDStream;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.streaming.api.java.JavaStreamingContext;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.streaming.kafka.KafkaUtils;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> kafka.serializer.StringDecoder;</span><br><span class="line"><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="hljs-keyword">import</span> scala.Tuple2;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * </span></span><br><span class="line"><span class="hljs-comment"> * 处理后的结果如果需要保存到其它系统（ES,Redis,Mysql等）,使用分区的方式</span></span><br><span class="line"><span class="hljs-comment"> * 例子：统计每一天中同一个源IP对同一个目标IP的攻击次数，如果攻击数量超过一定阀值，则告警，数据保存到Redis</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WriterDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//2016-07-13 01:10:23 WARMING src_ip:192.1.1.100 dest_ip:10.1.1.2 attack_type:program virus infections</span></span><br><span class="line"><span class="hljs-comment">//正则拆出：day, src_ip, dest_ip, type</span></span><br><span class="line">String log_regs = <span class="hljs-string">"(\\d+-\\d+-\\d+)\\s\\d+:\\d+:\\d+\\s.*src_ip:(\\S+)\\sdest_ip:(\\S+)\\sattack_type:(.*)"</span>;</span><br><span class="line">Pattern pattern = Pattern.compile(log_regs);</span><br><span class="line"><span class="hljs-keyword">int</span> limit = <span class="hljs-number">10</span>;</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; loginTopicsSet = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(<span class="hljs-string">"rest_topic"</span>.split(<span class="hljs-string">","</span>)));</span><br><span class="line">Map&lt;String, String&gt; kafkaParams = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        kafkaParams.put(<span class="hljs-string">"metadata.broker.list"</span>, <span class="hljs-string">"master:9092,slave1:9092"</span>);</span><br><span class="line">        kafkaParams.put(<span class="hljs-string">"group.id"</span>, <span class="hljs-string">"consummer1"</span>);</span><br><span class="line">        kafkaParams.put(<span class="hljs-string">"serializer.class"</span>, <span class="hljs-string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line"></span><br><span class="line">SparkConf sparkConf = <span class="hljs-keyword">new</span> SparkConf().setAppName(<span class="hljs-string">"WindowEventTriggerCard"</span>).setMaster(<span class="hljs-string">"local[2]"</span>);</span><br><span class="line">JavaStreamingContext jssc = <span class="hljs-keyword">new</span> JavaStreamingContext(sparkConf, <span class="hljs-keyword">new</span> Duration(<span class="hljs-number">10</span> * <span class="hljs-number">1000</span>));</span><br><span class="line">JavaPairInputDStream&lt;String, String&gt; logDstream  = KafkaUtils.createDirectStream(jssc, String.class,</span><br><span class="line">String.class, StringDecoder.class, StringDecoder.class, kafkaParams, loginTopicsSet);</span><br><span class="line"></span><br><span class="line">logDstream.filter(log -&gt; log._2.contains(<span class="hljs-string">"WARMING"</span>))</span><br><span class="line">.mapToPair(log -&gt; &#123;</span><br><span class="line"></span><br><span class="line">Matcher matcher = pattern.matcher(log._2);</span><br><span class="line">String day = <span class="hljs-keyword">null</span>;</span><br><span class="line">String src_ip = <span class="hljs-keyword">null</span>;</span><br><span class="line">String dest_ip = <span class="hljs-keyword">null</span>;</span><br><span class="line">String type = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(matcher.find()) &#123;</span><br><span class="line">day = matcher.group(<span class="hljs-number">1</span>);</span><br><span class="line">src_ip = matcher.group(<span class="hljs-number">2</span>);</span><br><span class="line">dest_ip = matcher.group(<span class="hljs-number">3</span>);</span><br><span class="line">type = matcher.group(<span class="hljs-number">4</span>);</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">day = <span class="hljs-string">"not_matcher_user"</span>;</span><br><span class="line">src_ip = <span class="hljs-string">"not_matcher_src_ip"</span>;</span><br><span class="line">dest_ip = <span class="hljs-string">"not_matcher_dest_ip"</span>;</span><br><span class="line">type = <span class="hljs-string">"ot_matcher_type"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//把  day,src_ip,dest_ip作为key</span></span><br><span class="line">String key = day + <span class="hljs-string">","</span> + src_ip + <span class="hljs-string">","</span> + dest_ip;</span><br><span class="line">Tuple2&lt;String,Integer&gt; value = <span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(type, <span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Tuple2&lt;String, Tuple2&lt;String,Integer&gt;&gt;(key, value);</span><br><span class="line">&#125;)</span><br><span class="line">.reduceByKey((log1, log2) -&gt; <span class="hljs-keyword">new</span> Tuple2&lt;String,Integer&gt;(log1._1 + <span class="hljs-string">","</span> + log2._1, log1._2 + log2._2))</span><br><span class="line">.filter(log -&gt; log._2._2 &gt; limit)</span><br><span class="line">.foreachRDD(logRDD -&gt; &#123;</span><br><span class="line">logRDD.foreachPartition(itr -&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//获取redis客户端对象 jedis</span></span><br><span class="line">Jedis jedis = <span class="hljs-keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//往redis写数据</span></span><br><span class="line">Tuple2&lt;String, Tuple2&lt;String, Integer&gt;&gt; tmp = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(itr.hasNext()) &#123;</span><br><span class="line">tmp = itr.next();</span><br><span class="line">jedis.hset(<span class="hljs-string">"alarm.today"</span>, tmp._1, <span class="hljs-string">"alarm --&gt; 攻击次数："</span> + tmp._2._2 + <span class="hljs-string">"，攻击类型："</span> + tmp._2._1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//关闭redis客户端对象</span></span><br><span class="line">jedis.close();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">jssc.start();</span><br><span class="line">jssc.awaitTermination();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在实际开发中，免不了要涉及到对数据分组、实时数据和历史数据匹配、处理后的结果需要保存到其它系统（ES,Redis,Mysql等）等，这里是对这三种情况简单实现的例子。&lt;/p&gt;
    
    </summary>
    
    
      <category term="spark" scheme="http://yoursite.com/categories/spark/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>spark-updateStateByKey状态更新</title>
    <link href="http://yoursite.com/2019/09/24/spark-updateStateByKey%E7%8A%B6%E6%80%81%E6%9B%B4%E6%96%B0/"/>
    <id>http://yoursite.com/2019/09/24/spark-updateStateByKey状态更新/</id>
    <published>2019-09-24T07:15:23.728Z</published>
    <updated>2016-08-09T13:11:24.159Z</updated>
    
    <content type="html"><![CDATA[<p>SparkStreaming是基于时间分片的近实时处理组件，比如需要实时对日志进行词频统计，通常是使用reduceByKey来处理，这样处理的结果是每一个时间片段的词频统计，例如第n个时间片的处理结果是[hello:3, world:5]，第n+1个时间片的处理结果是[hello:2, world:2]，但是这并不是我们期望的结果，我们期望得到的结果是不断累积各个时间片的词频，如上面的例子所希望的结果应该是[hello:5, world:7]。</p><a id="more"></a><p>spark提供一个状态更新的方法updateStateByKey，使用场景：第n个时间片处理是基于第n-1个时间片的结果。<br>这里举一个复杂一点的例子：<br>统计用户登录失败次数，超过阀值则告警，产生告警之后的5分钟内，不再重复发送该告警。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">package</span> com.demo.hl;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> com.google.common.base.Optional;</span><br><span class="line"><span class="hljs-keyword">import</span> kafka.serializer.StringDecoder;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.SparkConf;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.streaming.Duration;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.streaming.api.java.JavaPairInputDStream;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.streaming.api.java.JavaStreamingContext;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.streaming.kafka.KafkaUtils;</span><br><span class="line"><span class="hljs-keyword">import</span> scala.Tuple2;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.*;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 窗口操作</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * 统计用户登录失败超过阀值告警，产生告警之后的5分钟内，不再重复发送该告警</span></span><br><span class="line"><span class="hljs-comment"> * 这了使用到了一个状态更新的api : updateStateByKey</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WindowEventTriggerDemo</span></span></span><br><span class="line"><span class="hljs-class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"></span><br><span class="line">String login_regs = <span class="hljs-string">"(\\d+-\\d+-\\d+\\s\\d+:\\d+:\\d+)\\s(\\w+)\\s.*"</span>;</span><br><span class="line">Pattern pattern = Pattern.compile(login_regs);</span><br><span class="line"><span class="hljs-keyword">int</span> triggerLevel = <span class="hljs-number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> windowTimeLength = <span class="hljs-number">1</span>;    <span class="hljs-comment">//单位：分钟</span></span><br><span class="line"><span class="hljs-keyword">int</span> slideLength = <span class="hljs-number">10</span>;        <span class="hljs-comment">//单位：秒</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> skipAlarmBatchDuration = (windowTimeLength * <span class="hljs-number">60</span>) / slideLength;</span><br><span class="line"></span><br><span class="line">Duration windowDuration = <span class="hljs-keyword">new</span> Duration(windowTimeLength * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>);</span><br><span class="line">Duration slideDuration = <span class="hljs-keyword">new</span> Duration(slideLength * <span class="hljs-number">1000</span>);</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; loginTopicsSet = <span class="hljs-keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="hljs-string">"rest_topic"</span>.split(<span class="hljs-string">","</span>)));</span><br><span class="line">Map&lt;String, String&gt; kafkaParams = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">kafkaParams.put(<span class="hljs-string">"metadata.broker.list"</span>, <span class="hljs-string">"master:9092,slave1:9092"</span>);</span><br><span class="line">kafkaParams.put(<span class="hljs-string">"group.id"</span>, <span class="hljs-string">"consummer1"</span>);</span><br><span class="line">kafkaParams.put(<span class="hljs-string">"serializer.class"</span>, <span class="hljs-string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line"></span><br><span class="line">SparkConf sparkConf = <span class="hljs-keyword">new</span> SparkConf().setAppName(<span class="hljs-string">"WindowEventTriggerCard"</span>).setMaster(<span class="hljs-string">"local[4]"</span>);</span><br><span class="line">JavaStreamingContext jssc = <span class="hljs-keyword">new</span> JavaStreamingContext(sparkConf, <span class="hljs-keyword">new</span> Duration(<span class="hljs-number">10</span> * <span class="hljs-number">1000</span>));</span><br><span class="line">JavaPairInputDStream&lt;String, String&gt; loginDstream = KafkaUtils</span><br><span class="line">.createDirectStream(jssc, String.class, String.class, StringDecoder.class, StringDecoder.class,</span><br><span class="line">kafkaParams, loginTopicsSet);</span><br><span class="line"></span><br><span class="line">jssc.checkpoint(<span class="hljs-string">"hdfs://slave1:9000/user/checkpoints"</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//过滤登录失败的记录</span></span><br><span class="line">loginDstream.filter(log -&gt; log._2.contains(<span class="hljs-string">"login failed"</span>))</span><br><span class="line"><span class="hljs-comment">//拆分key-value对 [key : user, value : windowEventTrigger]</span></span><br><span class="line">.mapToPair(log -&gt; &#123;</span><br><span class="line"></span><br><span class="line">Matcher matcher = pattern.matcher(log._2);</span><br><span class="line">String user = <span class="hljs-keyword">null</span>;</span><br><span class="line">String time = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">if</span> (matcher.find())</span><br><span class="line">&#123;</span><br><span class="line">user = matcher.group(<span class="hljs-number">2</span>);</span><br><span class="line">time = matcher.group(<span class="hljs-number">1</span>);</span><br><span class="line">&#125; <span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">user = <span class="hljs-string">"NULL-user"</span>;</span><br><span class="line">time = <span class="hljs-string">"NULL-time"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">WindowEventTrigger windowEventTrigger = <span class="hljs-keyword">new</span> WindowEventTrigger();</span><br><span class="line">windowEventTrigger.eventsInWindow.add(time);</span><br><span class="line"><span class="hljs-comment">//key : user , value : timeList</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Tuple2&lt;&gt;(user, windowEventTrigger);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-comment">//5分钟增量窗口</span></span><br><span class="line">.reduceByKeyAndWindow(WindowEventTrigger::add, WindowEventTrigger::remove, windowDuration,</span><br><span class="line">slideDuration)</span><br><span class="line"><span class="hljs-comment">//更新状态</span></span><br><span class="line">.updateStateByKey((List&lt;WindowEventTrigger&gt; newEvents, Optional&lt;WindowEventTrigger&gt; state) -&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//获取前一个批次保存的状态信息，并把最新的数据更新到状态对象里面</span></span><br><span class="line">WindowEventTrigger stat_value = state.isPresent() ? state.get() : <span class="hljs-keyword">new</span> WindowEventTrigger();</span><br><span class="line">stat_value.eventsInWindow.clear();</span><br><span class="line"><span class="hljs-keyword">if</span> (stat_value.flag == <span class="hljs-number">0</span> &amp;&amp; !stat_value.isAlarm)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (WindowEventTrigger e : newEvents)</span><br><span class="line">&#123;</span><br><span class="line">stat_value.eventsInWindow.addAll(e.eventsInWindow);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//如果登录失败次数超过阀值，且flag=0 和 isAlarm=false，则需要告警：设置isAlarm=true 且 flag+1</span></span><br><span class="line"><span class="hljs-comment">//如果登陆失败次数低于阀值，且flag=0 和 isAlarm=false，则不需要任何操作</span></span><br><span class="line"><span class="hljs-comment">//否则如果flag&lt;skipAlarmBatchDuration，则不告警，直到flag==skipAlarmBatchDuration时，把flag回复为0，也不告警，不过此时的flag和isAlarm已经回复为最初状态：0 和 false</span></span><br><span class="line"><span class="hljs-comment">//这样做的目的是在产生告警的之后的skipAlarmBatchDuration个批次时间内不再重复发送该告警</span></span><br><span class="line"><span class="hljs-keyword">if</span> (stat_value.flag == <span class="hljs-number">0</span> &amp;&amp; !stat_value.isAlarm &amp;&amp; stat_value.eventsInWindow.size() &gt;= triggerLevel)</span><br><span class="line">&#123;</span><br><span class="line">stat_value.isAlarm = <span class="hljs-keyword">true</span>;</span><br><span class="line">stat_value.flag++;</span><br><span class="line"></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stat_value.flag != <span class="hljs-number">0</span> || stat_value.isAlarm</span><br><span class="line">|| stat_value.eventsInWindow.size() &gt;= triggerLevel)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (stat_value.flag &lt; skipAlarmBatchDuration)</span><br><span class="line">&#123;</span><br><span class="line">stat_value.flag++;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">stat_value.flag = <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">stat_value.isAlarm = <span class="hljs-keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> Optional.of(stat_value);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-comment">//过滤出需要告警的记录</span></span><br><span class="line">.filter(event -&gt; event._2.isAlarm)</span><br><span class="line"><span class="hljs-comment">//发送告警信息</span></span><br><span class="line">.foreachRDD(eventRDD -&gt; &#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"-------------------- count ---------- &gt; "</span> + eventRDD.count());</span><br><span class="line">eventRDD.foreachPartition(itr -&gt; &#123;</span><br><span class="line"></span><br><span class="line">Tuple2&lt;String, WindowEventTrigger&gt; tmp = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">while</span> (itr.hasNext())</span><br><span class="line">&#123;</span><br><span class="line">tmp = itr.next();</span><br><span class="line">System.out.println(</span><br><span class="line"><span class="hljs-string">"alarm --&gt; user: "</span> + tmp._1 + <span class="hljs-string">" login failed, count: "</span> + tmp._2.eventsInWindow</span><br><span class="line">.size());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">jssc.start();</span><br><span class="line">jssc.awaitTermination();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * </span></span><br><span class="line"><span class="hljs-comment"> *  事件触发类</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WindowEventTrigger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span></span><br><span class="line"><span class="hljs-class"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> TreeSet&lt;String&gt; eventsInWindow = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();    <span class="hljs-comment">//告警事件列表</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> isAlarm = <span class="hljs-keyword">false</span>;            <span class="hljs-comment">//是否告警</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;    <span class="hljs-comment">//从告警那一刻起，之后的5分钟内不再重复发送该告警，这个值不能超过  窗口长度 是 执行间隔的 倍数</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WindowEventTrigger</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * add</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> incoming</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 把每条记录封装为事件触发器</span></span><br><span class="line"><span class="hljs-comment"> * 注意：reduceByKeyAndWindow(_ + _, _ - _, Seconds(5s)，seconds(1))，对于这个操作的增量方法的操作，如：</span></span><br><span class="line"><span class="hljs-comment"> * 即key值一样的，把已有的 values 和新增的数据进行增量操作</span></span><br><span class="line"><span class="hljs-comment"> * addFunction：原先总体的数据集 和 新增的数据 进行操作</span></span><br><span class="line"><span class="hljs-comment"> * removeFunction：在addFunction操作之后的数据集 和 减掉的数据 进行操作</span></span><br><span class="line"><span class="hljs-comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="hljs-comment"> * 应用场景：同一个用户5分钟内登录失败次数超过10次产生告警，如果某用户登录产生告警之后，且之后的5分钟不再发同样的告警</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> WindowEventTrigger <span class="hljs-title">add</span><span class="hljs-params">(WindowEventTrigger incoming)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//把原先触发事件集 和 新增触发事件 并集操作</span></span><br><span class="line"><span class="hljs-keyword">this</span>.eventsInWindow.addAll(incoming.eventsInWindow);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//remove</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> WindowEventTrigger <span class="hljs-title">remove</span><span class="hljs-params">(WindowEventTrigger outgoing)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//移除values中过时的数据</span></span><br><span class="line"><span class="hljs-keyword">this</span>.eventsInWindow.removeAll(outgoing.eventsInWindow);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SparkStreaming是基于时间分片的近实时处理组件，比如需要实时对日志进行词频统计，通常是使用reduceByKey来处理，这样处理的结果是每一个时间片段的词频统计，例如第n个时间片的处理结果是[hello:3, world:5]，第n+1个时间片的处理结果是[hello:2, world:2]，但是这并不是我们期望的结果，我们期望得到的结果是不断累积各个时间片的词频，如上面的例子所希望的结果应该是[hello:5, world:7]。&lt;/p&gt;
    
    </summary>
    
    
      <category term="spark" scheme="http://yoursite.com/categories/spark/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>spark-storage性能优化</title>
    <link href="http://yoursite.com/2019/09/24/spark-storage-optimization/"/>
    <id>http://yoursite.com/2019/09/24/spark-storage-optimization/</id>
    <published>2019-09-24T07:15:23.726Z</published>
    <updated>2016-08-04T13:17:39.583Z</updated>
    
    <content type="html"><![CDATA[<h3 id="storage性能优化参数设置"><a href="#storage性能优化参数设置" class="headerlink" title="storage性能优化参数设置"></a>storage性能优化参数设置</h3><h4 id="1-spark-local-dir"><a href="#1-spark-local-dir" class="headerlink" title="(1) spark.local.dir"></a>(1) spark.local.dir</h4><p>这个看起来很简单，就是Spark用于写中间数据，如RDD Cache，Shuffle，Spill等数据的位置，那么有什么可以注意的呢。</p><p>首先，最基本的当然是我们可以配置多个路径（用逗号分隔）到多个磁盘上增加整体IO带宽，这个大家都知道。</p><a id="more"></a> <p>其次，目前的实现中，Spark是通过对文件名采用hash算法分布到多个路径下的目录中去，如果你的存储设备有快有慢，比如SSD+HDD混合使用，那么你可以通过在SSD上配置更多的目录路径来增大它被Spark使用的比例，从而更好地利用SSD的IO带宽能力。当然这只是一种变通的方法，终极解决方案还是应该像目前HDFS的实现方向一样，让Spark能够感知具体的存储设备类型，针对性的使用。</p><p>需要注意的是，在Spark 1.0 以后，SPARK_LOCAL_DIRS (Standalone, Mesos) or LOCAL_DIRS (YARN)参数会覆盖这个配置。比如Spark On YARN的时候，Spark Executor的本地路径依赖于Yarn的配置，而不取决于这个参数。</p><h4 id="2-spark-executor-memory"><a href="#2-spark-executor-memory" class="headerlink" title="(2) spark.executor.memory"></a>(2) spark.executor.memory</h4><p>Executor 内存的大小，和性能本身当然并没有直接的关系，但是几乎所有运行时性能相关的内容都或多或少间接和内存大小相关。这个参数最终会被设置到Executor的JVM的heap尺寸上，对应的就是Xmx和Xms的值</p><p>理论上Executor 内存当然是多多益善，但是实际受机器配置，以及运行环境，资源共享，JVM GC效率等因素的影响，还是有可能需要为它设置一个合理的大小。 多大算合理，要看实际情况</p><p>Executor的内存基本上是Executor内部所有任务共享的，而每个Executor上可以支持的任务的数量取决于Executor所管理的CPU Core资源的多少，因此你需要了解每个任务的数据规模的大小，从而推算出每个Executor大致需要多少内存即可满足基本的需求。</p><p>如何知道每个任务所需内存的大小呢，这个很难统一的衡量，因为除了数据集本身的开销，还包括算法所需各种临时内存空间的使用，而根据具体的代码算法等不同，临时内存空间的开销也不同。但是数据集本身的大小，对最终所需内存的大小还是有一定的参考意义的。</p><p>通常来说每个分区的数据集在内存中的大小，可能是其在磁盘上源数据大小的若干倍（不考虑源数据压缩，Java对象相对于原始裸数据也还要算上用于管理数据的数据结构的额外开销），需要准确的知道大小的话，可以将RDD cache在内存中，从BlockManager的Log输出可以看到每个Cache分区的大小（其实也是估算出来的，并不完全准确）</p><pre><code>如： BlockManagerInfo: Added rdd_0_1 on disk on sr438:41134 (size: 495.3 MB)</code></pre><p>反过来说，如果你的Executor的数量和内存大小受机器物理配置影响相对固定，那么你就需要合理规划每个分区任务的数据规模，例如采用更多的分区，用增加任务数量（进而需要更多的批次来运算所有的任务）的方式来减小每个任务所需处理的数据大小。</p><h4 id="3-spark-storage-memoryFraction"><a href="#3-spark-storage-memoryFraction" class="headerlink" title="(3) spark.storage.memoryFraction"></a>(3) spark.storage.memoryFraction</h4><p>如前面所说spark.executor.memory决定了每个Executor可用内存的大小，而spark.storage.memoryFraction则决定了在这部分内存中有多少可以用于Memory Store管理RDD Cache数据，剩下的内存用来保证任务运行时各种其它内存空间的需要。</p><p>spark.executor.memory默认值为0.6，官方文档建议这个比值不要超过JVM Old Gen区域的比值。这也很容易理解，因为RDD Cache数据通常都是长期驻留内存的，理论上也就是说最终会被转移到Old Gen区域（如果该RDD还没有被删除的话），如果这部分数据允许的尺寸太大，势必把Old Gen区域占满，造成频繁的FULL GC。</p><p>如何调整这个比值，取决于你的应用对数据的使用模式和数据的规模，粗略的来说，如果频繁发生Full GC，可以考虑降低这个比值，这样RDD Cache可用的内存空间减少（剩下的部分Cache数据就需要通过Disk Store写到磁盘上了），会带来一定的性能损失，但是腾出更多的内存空间用于执行任务，减少Full GC发生的次数，反而可能改善程序运行的整体性能</p><h4 id="4-spark-streaming-blockInterval"><a href="#4-spark-streaming-blockInterval" class="headerlink" title="(4) spark.streaming.blockInterval"></a>(4) spark.streaming.blockInterval</h4><p>这个参数用来设置Spark Streaming里Stream Receiver生成Block的时间间隔，默认为200ms。具体的行为表现是具体的Receiver所接收的数据，每隔这里设定的时间间隔，就从Buffer中生成一个StreamBlock放进队列，等待进一步被存储到BlockManager中供后续计算过程使用。理论上来说，为了每个Streaming Batch 间隔里的数据是均匀的，这个时间间隔当然应该能被Batch的间隔时间长度所整除。总体来说，如果内存大小够用，Streaming的数据来得及处理，这个blockInterval时间间隔的影响不大，当然，如果数据Cache Level是Memory+Ser，即做了序列化处理，那么BlockInterval的大小会影响序列化后数据块的大小，对于Java 的GC的行为会有一些影响。</p><p>此外spark.streaming.blockQueueSize决定了在StreamBlock被存储到BlockMananger之前，队列中最多可以容纳多少个StreamBlock。默认为10，因为这个队列Poll的时间间隔是100ms，所以如果CPU不是特别繁忙的话，基本上应该没有问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;storage性能优化参数设置&quot;&gt;&lt;a href=&quot;#storage性能优化参数设置&quot; class=&quot;headerlink&quot; title=&quot;storage性能优化参数设置&quot;&gt;&lt;/a&gt;storage性能优化参数设置&lt;/h3&gt;&lt;h4 id=&quot;1-spark-local-dir&quot;&gt;&lt;a href=&quot;#1-spark-local-dir&quot; class=&quot;headerlink&quot; title=&quot;(1) spark.local.dir&quot;&gt;&lt;/a&gt;(1) spark.local.dir&lt;/h4&gt;&lt;p&gt;这个看起来很简单，就是Spark用于写中间数据，如RDD Cache，Shuffle，Spill等数据的位置，那么有什么可以注意的呢。&lt;/p&gt;
&lt;p&gt;首先，最基本的当然是我们可以配置多个路径（用逗号分隔）到多个磁盘上增加整体IO带宽，这个大家都知道。&lt;/p&gt;
    
    </summary>
    
    
      <category term="spark" scheme="http://yoursite.com/categories/spark/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>spark-schedule性能优化</title>
    <link href="http://yoursite.com/2019/09/24/spark-schedule-optimization/"/>
    <id>http://yoursite.com/2019/09/24/spark-schedule-optimization/</id>
    <published>2019-09-24T07:15:23.721Z</published>
    <updated>2016-08-04T13:06:21.569Z</updated>
    
    <content type="html"><![CDATA[<p>调度相关的参数设置，大多数内容都很直白，其实无须过多的额外解释，不过基于这些参数的常用性（大概会是你针对自己的集群第一步就会配置的参数），这里多少就其内部机制做一些解释。</p><a id="more"></a> <hr><h3 id="schedule性能优化参数设置"><a href="#schedule性能优化参数设置" class="headerlink" title="schedule性能优化参数设置"></a>schedule性能优化参数设置</h3><h4 id="1-spark-cores-max"><a href="#1-spark-cores-max" class="headerlink" title="(1) spark.cores.max"></a>(1) spark.cores.max</h4><p>一个集群最重要的参数之一，当然就是CPU计算资源的数量。spark.cores.max 这个参数决定了在Standalone和Mesos模式下，一个Spark应用程序所能申请的CPU Core的数量。如果你没有并发跑多个Spark应用程序的需求，那么可以不需要设置这个参数，默认会使用spark.deploy.defaultCores的值（而spark.deploy.defaultCores的值默认为Int.Max，也就是不限制的意思）从而应用程序可以使用所有当前可以获得的CPU资源。</p><p>针对这个参数需要注意的是，这个参数对Yarn模式不起作用，YARN模式下，资源由Yarn统一调度管理，一个应用启动时所申请的CPU资源的数量由另外两个直接配置Executor的数量和每个Executor中core数量的参数决定。（历史原因造成，不同运行模式下的一些启动参数个人认为还有待进一步整合）</p><p>此外，在Standalone模式等后台分配CPU资源时，目前的实现中，在spark.cores.max允许的范围内，基本上是优先从每个Worker中申请所能得到的最大数量的CPU core给每个Executor，因此如果人工限制了所申请的Max Core的数量小于Standalone和Mesos模式所管理的CPU数量，可能发生应用只运行在集群中部分节点上的情况（因为部分节点所能提供的最大CPU资源数量已经满足应用的要求），而不是平均分布在集群中。通常这不会是太大的问题，但是如果涉及数据本地性的场合，有可能就会带来一定的必须进行远程数据读取的情况发生。理论上，这个问题可以通过两种途径解决：一是Standalone和Mesos的资源管理模块自动根据节点资源情况，均匀分配和启动Executor，二是和Yarn模式一样，允许用户指定和限制每个Executor的Core的数量。 社区中有一个PR试图走第二种途径来解决类似的问题，不过截至我写下这篇文档为止（2014.8），还没有被Merge。</p><h4 id="2-spark-task-cpus"><a href="#2-spark-task-cpus" class="headerlink" title="(2) spark.task.cpus"></a>(2) spark.task.cpus</h4><p>这个参数在字面上的意思就是分配给每个任务的CPU的数量，默认为1。实际上，这个参数并不能真的控制每个任务实际运行时所使用的CPU的数量，比如你可以通过在任务内部创建额外的工作线程来使用更多的CPU（至少目前为止，将来任务的执行环境是否能通过LXC等技术来控制还不好说）。它所发挥的作用，只是在作业调度时，每分配出一个任务时，对已使用的CPU资源进行计数。也就是说只是理论上用来统计资源的使用情况，便于安排调度。因此，如果你期望通过修改这个参数来加快任务的运行，那还是赶紧换个思路吧。这个参数的意义，个人觉得还是在你真的在任务内部自己通过任何手段，占用了更多的CPU资源时，让调度行为更加准确的一个辅助手段。</p><h4 id="3-spark-scheduler-mode"><a href="#3-spark-scheduler-mode" class="headerlink" title="(3) spark.scheduler.mode"></a>(3) spark.scheduler.mode</h4><p>这个参数决定了单个Spark应用内部调度的时候使用FIFO模式还是Fair模式。是的，你没有看错，这个参数只管理一个Spark应用内部的多个没有依赖关系的Job作业的调度策略。</p><p>如果你需要的是多个Spark应用之间的调度策略，那么在Standalone模式下，这取决于每个应用所申请和获得的CPU资源的数量（暂时没有获得资源的应用就Pending在那里了），基本上就是FIFO形式的，谁先申请和获得资源，谁就占用资源直到完成。而在Yarn模式下，则多个Spark应用间的调度策略由Yarn自己的策略配置文件所决定。</p><p>那么这个内部的调度逻辑有什么用呢？如果你的Spark应用是通过服务的形式，为多个用户提交作业的话，那么可以通过配置Fair模式相关参数来调整不同用户作业的调度和资源分配优先级。</p><h4 id="4-spark-locality-wait"><a href="#4-spark-locality-wait" class="headerlink" title="(4) spark.locality.wait"></a>(4) spark.locality.wait</h4><pre><code>这几个参数影响了任务分配时的本地性策略的相关细节：spark.locality.waitspark.locality.wait.processspark.locality.wait.nodespark.locality.wait.rack</code></pre><p>Spark中任务的处理需要考虑所涉及的数据的本地性的场合，基本就两种，一是数据的来源是HadoopRDD; 二是RDD的数据来源来自于RDD Cache（即由CacheManager从BlockManager中读取，或者Streaming数据源RDD）。其它情况下，如果不涉及shuffle操作的RDD，不构成划分Stage和Task的基准，不存在判断Locality本地性的问题，而如果是ShuffleRDD，其本地性始终为No Prefer，因此其实也无所谓Locality。</p><p>在理想的情况下，任务当然是分配在可以从本地读取数据的节点上时（同一个JVM内部或同一台物理机器内部）的运行时性能最佳。但是每个任务的执行速度无法准确估计，所以很难在事先获得全局最优的执行策略，当Spark应用得到一个计算资源的时候，如果没有可以满足最佳本地性需求的任务可以运行时，是退而求其次，运行一个本地性条件稍差一点的任务呢，还是继续等待下一个可用的计算资源已期望它能更好的匹配任务的本地性呢？</p><p>这几个参数一起决定了Spark任务调度在得到分配任务时，选择暂时不分配任务，而是等待获得满足进程内部/节点内部/机架内部这样的不同层次的本地性资源的最长等待时间。默认都是3000毫秒。</p><p>基本上，如果你的任务数量较大和单个任务运行时间比较长的情况下，单个任务是否在数据本地运行，代价区别可能比较显著，如果数据本地性不理想，那么调大这些参数对于性能优化可能会有一定的好处。反之如果等待的代价超过带来的收益，那就不要考虑了。</p><p>特别值得注意的是：在处理应用刚启动后提交的第一批任务时，由于当作业调度模块开始工作时，处理任务的Executors可能还没有完全注册完毕，因此一部分的任务会被放置到No Prefer的队列中，这部分任务的优先级仅次于数据本地性满足Process级别的任务，从而被优先分配到非本地节点执行，如果的确没有Executors在对应的节点上运行，或者的确是No Prefer的任务（如shuffleRDD），这样做确实是比较优化的选择，但是这里的实际情况只是这部分Executors还没来得及注册上而已。这种情况下，即使加大本节中这几个参数的数值也没有帮助。针对这个情况，有一些已经完成的和正在进行中的PR通过例如动态调整No Prefer队列，监控节点注册比例等等方式试图来给出更加智能的解决方案。不过，你也可以根据自身集群的启动情况，通过在创建SparkContext之后，主动Sleep几秒的方式来简单的解决这个问题。</p><h4 id="5-spark-speculation"><a href="#5-spark-speculation" class="headerlink" title="(5) spark.speculation"></a>(5) spark.speculation</h4><pre><code>以下等参数调整Speculation行为的具体细节，Speculation是在任务调度的时候，如果没有适合当前本地性要求的任务可供运行，将跑得慢的任务在空闲计算资源上再度调度的行为，这些参数调整这些行为的频率和判断指标，默认是不使用Speculation的 ：spark.speculationspark.speculation.intervalspark.speculation.quantilespark.speculation.multiplier</code></pre><p>通常来说很难正确的判断是否需要Speculation，能真正发挥Speculation用处的场合，往往是某些节点由于运行环境原因，比如CPU资源由于某种原因被占用，磁盘损坏导致IO缓慢造成任务执行速度异常的情况，当然前提是你的分区任务不存在仅能被执行一次，或者不能同时执行多个拷贝等情况。Speculation任务参照的指标通常是其它任务的执行时间，而实际的任务可能由于分区数据尺寸不均匀，本来就会有时间差异，加上一定的调度和IO的随机性，所以如果一致性指标定得过严，Speculation可能并不能真的发现问题，反而增加了不必要的任务开销，定得过宽，大概又基本相当于没用。</p><p>个人觉得，如果你的集群规模比较大，运行环境复杂，的确可能经常发生执行异常，加上数据分区尺寸差异不大，为了程序运行时间的稳定性，那么可以考虑仔细调整这些参数。否则还是考虑如何排除造成任务执行速度异常的因数比较靠铺一些。</p><p>当然，我没有实际在很大规模的集群上运行过Spark，所以如果看法有些偏颇，还请有实际经验的XD指正。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;调度相关的参数设置，大多数内容都很直白，其实无须过多的额外解释，不过基于这些参数的常用性（大概会是你针对自己的集群第一步就会配置的参数），这里多少就其内部机制做一些解释。&lt;/p&gt;
    
    </summary>
    
    
      <category term="spark" scheme="http://yoursite.com/categories/spark/"/>
    
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>linux-常用命令</title>
    <link href="http://yoursite.com/2019/09/24/linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/09/24/linux-常用命令/</id>
    <published>2019-09-24T07:15:23.719Z</published>
    <updated>2016-08-18T15:34:38.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1、查找文件</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find / -name httpd.conf</span><br><span class="line">find /etc -name &apos;*srm*&apos;</span><br></pre></td></tr></table></figure><a id="more"></a> <p><strong>2、设置自动任务</strong><br>系统级别：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/crontab</span><br><span class="line">0 1 * * * sh /a.sh</span><br></pre></td></tr></table></figure><p>用户级别：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab -e -u root</span><br><span class="line">0 1 * * * sh /a.sh</span><br></pre></td></tr></table></figure><p>检查开机启动：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list crond</span><br><span class="line">crontab -l -u user</span><br></pre></td></tr></table></figure><p>时间任务格式：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*/1 * * * * sh /home/hadoop/test2/start_offline.sh</span><br><span class="line">0 1 * * * sh /home/hadoop/test2/start_offline.sh</span><br></pre></td></tr></table></figure><p><strong>3、文本替换</strong></p><p>vi/vim 中可以使用 ：s 命令来替换字符串。该命令有很多种不同细节使用方法，可以实现复杂的功能，记录几种在此，方便以后查询。 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　　：s/vivian/sky/ 替换当前行第一个 vivian 为 sky </span><br><span class="line">　 </span><br><span class="line">　　：s/vivian/sky/g 替换当前行所有 vivian 为 sky </span><br><span class="line">　 </span><br><span class="line">　　：n，$s/vivian/sky/ 替换第 n 行开始到最后一行中每一行的第一个 vivian 为 sky </span><br><span class="line">　 </span><br><span class="line">　　：n，$s/vivian/sky/g 替换第 n 行开始到最后一行中每一行所有 vivian 为 sky</span><br></pre></td></tr></table></figure><p>　　n 为数字，若 n 为 .，表示从当前行开始到最后一行 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　：%s/vivian/sky/（等同于 ：g/vivian/s//sky/） 替换每一行的第一个 vivian 为 sky </span><br><span class="line">　 </span><br><span class="line">　　：%s/vivian/sky/g（等同于 ：g/vivian/s//sky/g） 替换每一行中所有 vivian 为 sky</span><br></pre></td></tr></table></figure><p>　　可以使用 # 作为分隔符，此时中间出现的 / 不会作为分隔符</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　：s#vivian/#sky/# 替换当前行第一个 vivian/ 为 sky/ </span><br><span class="line">　 </span><br><span class="line">　　：%s+/oradata/apras/+/user01/apras1+ （使用+ 来 替换 / ）： /oradata/apras/替换成/user01/apras1/</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　1.：s/vivian/sky/ 替换当前行第一个 vivian 为 sky </span><br><span class="line">　 </span><br><span class="line">　　：s/vivian/sky/g 替换当前行所有 vivian 为 sky</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　2. ：n，$s/vivian/sky/ 替换第 n 行开始到最后一行中每一行的第一个 vivian 为 sky </span><br><span class="line">　 </span><br><span class="line">　　：n，$s/vivian/sky/g 替换第 n 行开始到最后一行中每一行所有 vivian 为 sky </span><br><span class="line">　 </span><br><span class="line">　　（n 为数字，若 n 为 .，表示从当前行开始到最后一行）</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　3. ：%s/vivian/sky/（等同于 ：g/vivian/s//sky/） 替换每一行的第一个 vivian 为 sky </span><br><span class="line">　 </span><br><span class="line">　　：%s/vivian/sky/g（等同于 ：g/vivian/s//sky/g） 替换每一行中所有 vivian 为 sky</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　4. 可以使用 # 作为分隔符，此时中间出现的 / 不会作为分隔符</span><br><span class="line">　 </span><br><span class="line">　　：s#vivian/#sky/# 替换当前行第一个 vivian/ 为 sky/</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">　　5. 删除文本中的^M </span><br><span class="line">　 </span><br><span class="line">　　问题描述：对于换行，window下用回车换行（0A0D）来表示，linux下是回车（0A）来表示。这样，将window上的文件拷到unix上用时，</span><br><span class="line">总会有个^M.请写个用在unix下的过滤windows文件的换行符（0D）的shell或c程序。 </span><br><span class="line">　 </span><br><span class="line">　　。 使用命令：cat filename1 | tr -d “^V^M” &gt; newfile； </span><br><span class="line">　 </span><br><span class="line">　　。 使用命令：sed -e “s/^V^M//” filename &gt; outputfilename.需要注意的是在1、2两种方法中，^V和^M指的是Ctrl+V和Ctrl+M.你必须要手工进行输入，而不是粘贴。 </span><br><span class="line">　 </span><br><span class="line">　　。 在vi中处理：首先使用vi打开文件，然后按ESC键，接着输入命令：%s/^V^M//. </span><br><span class="line">　 </span><br><span class="line">　　。 ：%s/^M$//g </span><br><span class="line">　 </span><br><span class="line">　　如果上述方法无用，则正确的解决办法是： [Page]</span><br><span class="line">　 </span><br><span class="line">　　。 tr -d \&quot;\\r\&quot; &lt; src &gt;dest </span><br><span class="line">　 </span><br><span class="line">　　。 tr -d \&quot;\\015\&quot; dest </span><br><span class="line">　 </span><br><span class="line">　　。 strings A&gt;B</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">6. 替换确认</span><br><span class="line">我们有很多时候会需要某个字符(串)在文章中某些位置出现时被替换，而其它位置不被替换的有选择的操作，这就需要用户来进行确认，vi的查找替换同样支持</span><br><span class="line">例如</span><br><span class="line">：s/vivian/sky/g 替换当前行所有 vivian 为 sky </span><br><span class="line">在命令后面加上一个字母c就可以实现，即：s/vivian/sky/gc</span><br><span class="line">顾名思意，c是confirm的缩写</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">　　7. 其它</span><br><span class="line">　 </span><br><span class="line">　　利用 ：s 命令可以实现字符串的替换。具体的用法包括： </span><br><span class="line">　 </span><br><span class="line">　　：s/str1/str2/ 用字符串 str2 替换行中首次出现的字符串 str1 </span><br><span class="line">　 </span><br><span class="line">　　：s/str1/str2/g 用字符串 str2 替换行中所有出现的字符串 str1 </span><br><span class="line">　 </span><br><span class="line">　　：。，$ s/str1/str2/g 用字符串 str2 替换正文当前行到末尾所有出现的字符串 str1 </span><br><span class="line">　 </span><br><span class="line">　　：1，$ s/str1/str2/g 用字符串 str2 替换正文中所有出现的字符串 str1 </span><br><span class="line">　 </span><br><span class="line">　　：g/str1/s//str2/g 功能同上</span><br></pre></td></tr></table></figure><p>　　从上述替换命令可以看到：g 放在命令末尾，表示对搜索字符串的每次出现进行替换；不加 g，表示只对搜索<br>　　字符串的首次出现进行替换；g 放在命令开头，表示对正文中所有包含搜索字符串的行进行替换操作</p><p><strong>4、用户线程数设置</strong></p><p>Linux对于每个用户，系统限制其最大进程数。为提高性能，可以根据设备资源情况，设置各linux 用户的最大进程数<br>可以用ulimit -a 来显示当前的各种用户进程限制。<br>下面我把某linux用户的最大进程数设为10000个：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ulimit -u 10240</span><br><span class="line">对于需要做许多 socket 连接并使它们处于打开状态的 Java 应用程序而言，</span><br><span class="line">最好通过使用 ulimit -n xx 修改每个进程可打开的文件数，缺省值是 1024。</span><br><span class="line">ulimit -n 4096 将每个进程可以打开的文件数目加大到4096，缺省为1024</span><br><span class="line">其他建议设置成无限制（unlimited）的一些重要设置是：</span><br><span class="line">数据段长度：ulimit -d unlimited</span><br><span class="line">最大内存大小：ulimit -m unlimited</span><br><span class="line">堆栈大小：ulimit -s unlimited</span><br><span class="line">CPU 时间：ulimit -t unlimited</span><br><span class="line">虚拟内存：ulimit -v unlimited</span><br></pre></td></tr></table></figure><p>　　<br>     暂时地，适用于通过 ulimit 命令登录 shell 会话期间。<br>     永久地，通过将一个相应的 ulimit 语句添加到由登录 shell 读取的文件中， 即特定于 shell 的用户资源文件，如：<br>1)、解除 Linux 系统的最大进程数和最大文件打开数限制：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> vi /etc/security/limits.conf</span><br><span class="line"> # 添加如下的行</span><br><span class="line"> * soft noproc 11000</span><br><span class="line"> * hard noproc 11000</span><br><span class="line"> * soft nofile 4100</span><br><span class="line"> * hard nofile 4100</span><br><span class="line">说明：* 代表针对所有用户，noproc 是代表最大进程数，nofile 是代表最大文件打开数</span><br></pre></td></tr></table></figure><p>2)、让 SSH 接受 Login 程式的登入，方便在 ssh 客户端查看 ulimit -a 资源限制：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a、vi /etc/ssh/sshd_config</span><br><span class="line">           把 UserLogin 的值改为 yes，并把 # 注释去掉</span><br><span class="line">      b、重启 sshd 服务：</span><br><span class="line">            /etc/init.d/sshd restart</span><br></pre></td></tr></table></figure><p>3)、修改所有 linux 用户的环境变量文件：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line">   ulimit -u 10000</span><br><span class="line">   ulimit -n 4096</span><br><span class="line">   ulimit -d unlimited</span><br><span class="line">   ulimit -m unlimited</span><br><span class="line">   ulimit -s unlimited</span><br><span class="line">   ulimit -t unlimited</span><br><span class="line">   ulimit -v unlimited</span><br></pre></td></tr></table></figure><p> 保存后运行#source /etc/profile 使其生效</p><p>可以用ulimit -a 来显示当前的各种用户进程限制</p><p>参数 描述<br>ulimited 不限制用户可以使用的资源，但本设置对可打开的最大文件数（max open files）<br>和可同时运行的最大进程数（max user processes）无效</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-a 列出所有当前资源极限</span><br><span class="line">-c 设置core文件的最大值.单位:blocks</span><br><span class="line">-d 设置一个进程的数据段的最大值.单位:kbytes</span><br><span class="line">-f Shell 创建文件的文件大小的最大值，单位：blocks</span><br><span class="line">-h 指定设置某个给定资源的硬极限。如果用户拥有 root 用户权限，可以增大硬极限。任何用户均可减少硬极限</span><br><span class="line">-l 可以锁住的物理内存的最大值</span><br><span class="line">-m 可以使用的常驻内存的最大值,单位：kbytes</span><br><span class="line">-n 每个进程可以同时打开的最大文件数</span><br><span class="line">-p 设置管道的最大值，单位为block，1block=512bytes</span><br><span class="line">-s 指定堆栈的最大值：单位：kbytes</span><br><span class="line">-S 指定为给定的资源设置软极限。软极限可增大到硬极限的值。如果 -H 和 -S 标志均未指定，极限适用于以上二者</span><br><span class="line">-t 指定每个进程所使用的秒数,单位：seconds</span><br><span class="line">-u 可以运行的最大并发进程数</span><br><span class="line">-v Shell可使用的最大的虚拟内存，单位：kbytes</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1、查找文件&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;find / -name httpd.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;find /etc -name &amp;apos;*srm*&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>java-AES加解密和RSA加解密</title>
    <link href="http://yoursite.com/2019/09/24/java-AES%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%92%8CRSA%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
    <id>http://yoursite.com/2019/09/24/java-AES加解密和RSA加解密/</id>
    <published>2019-09-24T07:15:23.717Z</published>
    <updated>2016-08-12T14:36:25.782Z</updated>
    
    <content type="html"><![CDATA[<p><strong>AES加解密（对称加密算法）</strong><br>高级加密标准（英语：Advanced Encryption Standard，缩写：AES），是一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。那么为什么原来的DES会被取代呢，原因就在于其使用56位密钥，比较容易被破解。而AES可以使用128、192、和256位密钥，并且用128位分组加密和解密数据，相对来说安全很多。<a id="more"></a> 完善的加密算法在理论上是无法破解的，除非使用穷尽法。使用穷尽法破解密钥长度在128位以上的加密数据是不现实的，仅存在理论上的可能性。统计显示，即使使用目前世界上运算速度最快的计算机，穷尽128位密钥也要花上几十亿年的时间，更不用说去破解采用256位密钥长度的AES算法了。<br>注意：指定加密密码生成的秘钥都是一致的</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">package</span> com.systex.bh.utils;</span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.systex.bh.db.entity.Constant.AES_KEY;</span><br><span class="line"><span class="hljs-keyword">import</span> java.security.Key;</span><br><span class="line"><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="hljs-keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="hljs-keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="hljs-keyword">import</span> javax.crypto.KeyGenerator;</span><br><span class="line"><span class="hljs-keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.commons.codec.binary.Hex;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AESUtil</span></span></span><br><span class="line"><span class="hljs-class"></span>&#123;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 密钥算法</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String KEY_ALGORITHM = <span class="hljs-string">"AES"</span>;</span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_CIPHER_ALGORITHM = <span class="hljs-string">"AES/ECB/PKCS5Padding"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 指定字符串初始化密钥 ：</span></span><br><span class="line"><span class="hljs-comment"> * 利用randomInfo密码作为随机数初始化出128位的key生产者，加密没关系，SecureRandom是生成安全随机数序列，</span></span><br><span class="line"><span class="hljs-comment"> * randomInfo.getBytes()是种子，只要种子相同，序列就一样，所以解密只要有password就行</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> randomInfo 加密时的密码，可以指定</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> byte[] 密钥</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] getSecretKey(String randomInfo)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-comment">//返回生成指定算法的秘密密钥的 KeyGenerator 对象</span></span><br><span class="line">KeyGenerator kg = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">kg = KeyGenerator.getInstance(KEY_ALGORITHM);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//初始化此密钥生成器，使其具有确定的密钥大小</span></span><br><span class="line"><span class="hljs-comment">//AES 要求密钥长度为 128</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == randomInfo || <span class="hljs-string">""</span>.equals(randomInfo))</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-comment">//不指定字符串生成秘钥</span></span><br><span class="line">kg.init(<span class="hljs-number">128</span>);</span><br><span class="line">&#125; <span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"> SecureRandom random = SecureRandom.getInstance(<span class="hljs-string">"SHA1PRNG"</span>);</span><br><span class="line"> random.setSeed(randomInfo.getBytes());</span><br><span class="line"><span class="hljs-comment">//指定字符串生成秘钥</span></span><br><span class="line">kg.init(<span class="hljs-number">128</span>, random);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e)</span><br><span class="line">&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//生成一个密钥</span></span><br><span class="line">SecretKey secretKey = kg.generateKey();</span><br><span class="line"><span class="hljs-keyword">return</span> secretKey.getEncoded();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 不指定字符串初始化密钥</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] getSecretKey()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> getSecretKey(<span class="hljs-keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 转换密钥</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key 二进制密钥</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 密钥</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Key <span class="hljs-title">toKey</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] key)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-comment">//生成密钥</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SecretKeySpec(key, KEY_ALGORITHM);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 加密</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> data 待加密数据</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key  密钥</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> byte[]   加密数据</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] encrypt(<span class="hljs-keyword">byte</span>[] data, Key key) <span class="hljs-keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> encrypt(data, key, DEFAULT_CIPHER_ALGORITHM);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 加密</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> data 待加密数据</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key  二进制密钥</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> byte[]   加密数据</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] encrypt(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] key) <span class="hljs-keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> encrypt(data, key, DEFAULT_CIPHER_ALGORITHM);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 加密</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> data            待加密数据</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key             二进制密钥</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> cipherAlgorithm 加密算法/工作模式/填充方式</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> byte[]   加密数据</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] encrypt(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] key, String cipherAlgorithm) <span class="hljs-keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-comment">//还原密钥</span></span><br><span class="line">Key k = toKey(key);</span><br><span class="line"><span class="hljs-keyword">return</span> encrypt(data, k, cipherAlgorithm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 加密</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> data            待加密数据</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key             密钥</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> cipherAlgorithm 加密算法/工作模式/填充方式</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> byte[]   加密数据</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] encrypt(<span class="hljs-keyword">byte</span>[] data, Key key, String cipherAlgorithm) <span class="hljs-keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-comment">//实例化</span></span><br><span class="line">Cipher cipher = Cipher.getInstance(cipherAlgorithm);</span><br><span class="line"><span class="hljs-comment">//使用密钥初始化，设置为加密模式</span></span><br><span class="line">cipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class="line"><span class="hljs-comment">//执行操作</span></span><br><span class="line"><span class="hljs-keyword">return</span> cipher.doFinal(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 解密</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> data 待解密数据</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key  二进制密钥</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> byte[]   解密数据</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] decrypt(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] key) <span class="hljs-keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> decrypt(data, key, DEFAULT_CIPHER_ALGORITHM);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 解密</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> data 待解密数据</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key  密钥</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> byte[]   解密数据</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] decrypt(<span class="hljs-keyword">byte</span>[] data, Key key) <span class="hljs-keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> decrypt(data, key, DEFAULT_CIPHER_ALGORITHM);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 解密</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> data            待解密数据</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key             二进制密钥</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> cipherAlgorithm 加密算法/工作模式/填充方式</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> byte[]   解密数据</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] decrypt(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] key, String cipherAlgorithm) <span class="hljs-keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-comment">//还原密钥</span></span><br><span class="line">Key k = toKey(key);</span><br><span class="line"><span class="hljs-keyword">return</span> decrypt(data, k, cipherAlgorithm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 解密</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> data            待解密数据</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key             密钥</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> cipherAlgorithm 加密算法/工作模式/填充方式</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> byte[]   解密数据</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] decrypt(<span class="hljs-keyword">byte</span>[] data, Key key, String cipherAlgorithm) <span class="hljs-keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-comment">//实例化</span></span><br><span class="line">Cipher cipher = Cipher.getInstance(cipherAlgorithm);</span><br><span class="line"><span class="hljs-comment">//使用密钥初始化，设置为解密模式</span></span><br><span class="line">cipher.init(Cipher.DECRYPT_MODE, key);</span><br><span class="line"><span class="hljs-comment">//执行操作</span></span><br><span class="line"><span class="hljs-keyword">return</span> cipher.doFinal(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">showByteArray</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] data)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">"&#123;"</span>);</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">byte</span> b : data)</span><br><span class="line">&#123;</span><br><span class="line">sb.append(b).append(<span class="hljs-string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">sb.deleteCharAt(sb.length() - <span class="hljs-number">1</span>);</span><br><span class="line">sb.append(<span class="hljs-string">"&#125;"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 使用示例</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">String password = AES_KEY;</span><br><span class="line"><span class="hljs-keyword">byte</span>[] key = getSecretKey(password);</span><br><span class="line">System.out.println(<span class="hljs-string">"key："</span> + showByteArray(key));</span><br><span class="line"></span><br><span class="line">Key k = toKey(key);</span><br><span class="line"></span><br><span class="line">String data = <span class="hljs-string">"AES数据"</span>;</span><br><span class="line">System.out.println(<span class="hljs-string">"加密前数据: string:"</span> + data);</span><br><span class="line">System.out.println(<span class="hljs-string">"加密前数据: byte[]:"</span> + showByteArray(data.getBytes()));</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">byte</span>[] encryptData = encrypt(data.getBytes(), k);</span><br><span class="line">String tmp = Hex.encodeHexString(encryptData);</span><br><span class="line">System.out.println(<span class="hljs-string">"加密后数据: byte[]:"</span> + showByteArray(encryptData));</span><br><span class="line">System.out.println(<span class="hljs-string">"加密后数据: hexStr:"</span> + tmp);</span><br><span class="line">System.out.println(<span class="hljs-string">"加密后数据: hexStr:"</span> + showByteArray(Hex.decodeHex(tmp.toCharArray())));</span><br><span class="line">System.out.println(<span class="hljs-string">"加密后数据: hexStr:"</span> + Hex.encodeHexString(Hex.decodeHex(tmp.toCharArray())));</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">byte</span>[] decryptData = decrypt(Hex.decodeHex(tmp.toCharArray()), k);</span><br><span class="line">System.out.println(<span class="hljs-string">"解密后数据: byte[]:"</span> + showByteArray(decryptData));</span><br><span class="line">System.out.println(<span class="hljs-string">"解密后数据: string:"</span> + <span class="hljs-keyword">new</span> String(decryptData));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现RSA加解密（非对称加密算法）</strong><br>该算法可以实现应用license，有以下几个步骤： </p><ol><li>甲方构建密钥对（公钥和私钥，公钥给对方，私钥留给自己） </li><li>甲方使用私钥加密数据，然后用私钥对加密后的数据签名，并把这些发送给乙方；乙方使用公钥、签名来验证待解密数据是否有效，如果有效使用公钥对数据解密。</li><li>乙方使用公钥加密数据，向甲方发送经过加密后的数据；甲方获得加密数据，通过私钥解密。<ul><li>注意：RSA加密明文最大长度117字节，解密要求密文最大长度为128字节，所以在加密和解密的过程中需要分块进行</li><li>注意：指定加密密码生成的秘钥都是一致的</li></ul></li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">package</span> com.systex.bh.utils;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="hljs-keyword">import</span> java.security.Key;</span><br><span class="line"><span class="hljs-keyword">import</span> java.security.KeyFactory;</span><br><span class="line"><span class="hljs-keyword">import</span> java.security.KeyPair;</span><br><span class="line"><span class="hljs-keyword">import</span> java.security.KeyPairGenerator;</span><br><span class="line"><span class="hljs-keyword">import</span> java.security.PrivateKey;</span><br><span class="line"><span class="hljs-keyword">import</span> java.security.PublicKey;</span><br><span class="line"><span class="hljs-keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="hljs-keyword">import</span> java.security.Signature;</span><br><span class="line"><span class="hljs-keyword">import</span> java.security.interfaces.RSAPrivateKey;</span><br><span class="line"><span class="hljs-keyword">import</span> java.security.interfaces.RSAPublicKey;</span><br><span class="line"><span class="hljs-keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="hljs-keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Map;</span><br><span class="line"><span class="hljs-keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.commons.codec.binary.Hex;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RSAUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//加密算法RSA</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String KEY_ALGORITHM = <span class="hljs-string">"RSA"</span>;</span><br><span class="line">    <span class="hljs-comment">//签名算法</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SIGNATURE_ALGORITHM = <span class="hljs-string">"MD5withRSA"</span>;</span><br><span class="line">    <span class="hljs-comment">//获取公钥的key</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PUBLIC_KEY = <span class="hljs-string">"RSAPublicKey"</span>;</span><br><span class="line">    <span class="hljs-comment">//获取私钥的key</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PRIVATE_KEY = <span class="hljs-string">"RSAPrivateKey"</span>;</span><br><span class="line">    <span class="hljs-comment">//RSA最大加密明文大小</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_ENCRYPT_BLOCK = <span class="hljs-number">117</span>;</span><br><span class="line">    <span class="hljs-comment">//RSA最大解密密文大小</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_DECRYPT_BLOCK = <span class="hljs-number">128</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="hljs-comment">     * 按照指定字符串生成密钥对(公钥和私钥)</span></span><br><span class="line"><span class="hljs-comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> randomInfo 加密时的密码，可以指定</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; <span class="hljs-title">genKeyPair</span><span class="hljs-params">(String randomInfo)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(KEY_ALGORITHM);</span><br><span class="line">    </span><br><span class="line">        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">null</span> == randomInfo || <span class="hljs-string">""</span>.equals(randomInfo))&#123;</span><br><span class="line">        <span class="hljs-comment">//不指定字符串生成密钥对</span></span><br><span class="line">            keyPairGen.initialize(<span class="hljs-number">1024</span>);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-comment">//按照指定字符串生成密钥对</span></span><br><span class="line">        SecureRandom random = SecureRandom.getInstance(<span class="hljs-string">"SHA1PRNG"</span>);</span><br><span class="line">random.setSeed(randomInfo.getBytes());</span><br><span class="line">            keyPairGen.initialize(<span class="hljs-number">1024</span>, random);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        KeyPair keyPair = keyPairGen.generateKeyPair();</span><br><span class="line">        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();</span><br><span class="line">        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();</span><br><span class="line">        Map&lt;String, Object&gt; keyMap = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;(<span class="hljs-number">2</span>);</span><br><span class="line">        keyMap.put(PUBLIC_KEY, publicKey);</span><br><span class="line">        keyMap.put(PRIVATE_KEY, privateKey);</span><br><span class="line">        <span class="hljs-keyword">return</span> keyMap;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="hljs-comment">     * 不指定字符串生成密钥对(公钥和私钥)</span></span><br><span class="line"><span class="hljs-comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; <span class="hljs-title">genKeyPair</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="hljs-keyword">return</span> genKeyPair(<span class="hljs-keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="hljs-comment">     * 用私钥对信息生成数字签名</span></span><br><span class="line"><span class="hljs-comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="hljs-comment">     * </span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 已加密数据</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> privateKey 私钥(BASE64编码)</span></span><br><span class="line"><span class="hljs-comment">     * </span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">sign</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] data, String privateKey)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] keyBytes = Base64Util.decode(privateKey);</span><br><span class="line">        PKCS8EncodedKeySpec pkcs8KeySpec = <span class="hljs-keyword">new</span> PKCS8EncodedKeySpec(keyBytes);</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</span><br><span class="line">        PrivateKey privateK = keyFactory.generatePrivate(pkcs8KeySpec);</span><br><span class="line">        Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);</span><br><span class="line">        signature.initSign(privateK);</span><br><span class="line">        signature.update(data);</span><br><span class="line">        <span class="hljs-keyword">return</span> Base64Util.encode(signature.sign());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="hljs-comment">     * 校验数字签名</span></span><br><span class="line"><span class="hljs-comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="hljs-comment">     * </span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 已加密数据</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publicKey 公钥(BASE64编码)</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sign 数字签名</span></span><br><span class="line"><span class="hljs-comment">     * </span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment">     * </span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">verify</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] data, String publicKey, String sign)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] keyBytes = Base64Util.decode(publicKey);</span><br><span class="line">        X509EncodedKeySpec keySpec = <span class="hljs-keyword">new</span> X509EncodedKeySpec(keyBytes);</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</span><br><span class="line">        PublicKey publicK = keyFactory.generatePublic(keySpec);</span><br><span class="line">        Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);</span><br><span class="line">        signature.initVerify(publicK);</span><br><span class="line">        signature.update(data);</span><br><span class="line">        <span class="hljs-keyword">return</span> signature.verify(Base64Util.decode(sign));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * &lt;P&gt;</span></span><br><span class="line"><span class="hljs-comment">     * 私钥解密</span></span><br><span class="line"><span class="hljs-comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="hljs-comment">     * </span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> encryptedData 已加密数据</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> privateKey 私钥(BASE64编码)</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] decryptByPrivateKey(<span class="hljs-keyword">byte</span>[] encryptedData, String privateKey) <span class="hljs-keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] keyBytes = Base64Util.decode(privateKey);</span><br><span class="line">        PKCS8EncodedKeySpec pkcs8KeySpec = <span class="hljs-keyword">new</span> PKCS8EncodedKeySpec(keyBytes);</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</span><br><span class="line">        Key privateK = keyFactory.generatePrivate(pkcs8KeySpec);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, privateK);</span><br><span class="line">        <span class="hljs-keyword">int</span> inputLen = encryptedData.length;</span><br><span class="line">        ByteArrayOutputStream out = <span class="hljs-keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="hljs-keyword">int</span> offSet = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] cache;</span><br><span class="line">        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-comment">// 对数据分段解密</span></span><br><span class="line">        <span class="hljs-keyword">while</span> (inputLen - offSet &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (inputLen - offSet &gt; MAX_DECRYPT_BLOCK) &#123;</span><br><span class="line">                cache = cipher.doFinal(encryptedData, offSet, MAX_DECRYPT_BLOCK);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                cache = cipher.doFinal(encryptedData, offSet, inputLen - offSet);</span><br><span class="line">            &#125;</span><br><span class="line">            out.write(cache, <span class="hljs-number">0</span>, cache.length);</span><br><span class="line">            i++;</span><br><span class="line">            offSet = i * MAX_DECRYPT_BLOCK;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] decryptedData = out.toByteArray();</span><br><span class="line">        out.close();</span><br><span class="line">        <span class="hljs-keyword">return</span> decryptedData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="hljs-comment">     * 公钥解密</span></span><br><span class="line"><span class="hljs-comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="hljs-comment">     * </span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> encryptedData 已加密数据</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publicKey 公钥(BASE64编码)</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] decryptByPublicKey(<span class="hljs-keyword">byte</span>[] encryptedData, String publicKey) <span class="hljs-keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] keyBytes = Base64Util.decode(publicKey);</span><br><span class="line">        X509EncodedKeySpec x509KeySpec = <span class="hljs-keyword">new</span> X509EncodedKeySpec(keyBytes);</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</span><br><span class="line">        Key publicK = keyFactory.generatePublic(x509KeySpec);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, publicK);</span><br><span class="line">        <span class="hljs-keyword">int</span> inputLen = encryptedData.length;</span><br><span class="line">        ByteArrayOutputStream out = <span class="hljs-keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="hljs-keyword">int</span> offSet = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] cache;</span><br><span class="line">        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-comment">// 对数据分段解密</span></span><br><span class="line">        <span class="hljs-keyword">while</span> (inputLen - offSet &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (inputLen - offSet &gt; MAX_DECRYPT_BLOCK) &#123;</span><br><span class="line">                cache = cipher.doFinal(encryptedData, offSet, MAX_DECRYPT_BLOCK);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                cache = cipher.doFinal(encryptedData, offSet, inputLen - offSet);</span><br><span class="line">            &#125;</span><br><span class="line">            out.write(cache, <span class="hljs-number">0</span>, cache.length);</span><br><span class="line">            i++;</span><br><span class="line">            offSet = i * MAX_DECRYPT_BLOCK;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] decryptedData = out.toByteArray();</span><br><span class="line">        out.close();</span><br><span class="line">        <span class="hljs-keyword">return</span> decryptedData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="hljs-comment">     * 公钥加密</span></span><br><span class="line"><span class="hljs-comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="hljs-comment">     * </span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 源数据</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publicKey 公钥(BASE64编码)</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] encryptByPublicKey(<span class="hljs-keyword">byte</span>[] data, String publicKey) <span class="hljs-keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] keyBytes = Base64Util.decode(publicKey);</span><br><span class="line">        X509EncodedKeySpec x509KeySpec = <span class="hljs-keyword">new</span> X509EncodedKeySpec(keyBytes);</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</span><br><span class="line">        Key publicK = keyFactory.generatePublic(x509KeySpec);</span><br><span class="line">        <span class="hljs-comment">// 对数据加密</span></span><br><span class="line">        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, publicK);</span><br><span class="line">        <span class="hljs-keyword">int</span> inputLen = data.length;</span><br><span class="line">        ByteArrayOutputStream out = <span class="hljs-keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="hljs-keyword">int</span> offSet = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] cache;</span><br><span class="line">        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-comment">// 对数据分段加密</span></span><br><span class="line">        <span class="hljs-keyword">while</span> (inputLen - offSet &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (inputLen - offSet &gt; MAX_ENCRYPT_BLOCK) &#123;</span><br><span class="line">                cache = cipher.doFinal(data, offSet, MAX_ENCRYPT_BLOCK);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                cache = cipher.doFinal(data, offSet, inputLen - offSet);</span><br><span class="line">            &#125;</span><br><span class="line">            out.write(cache, <span class="hljs-number">0</span>, cache.length);</span><br><span class="line">            i++;</span><br><span class="line">            offSet = i * MAX_ENCRYPT_BLOCK;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] encryptedData = out.toByteArray();</span><br><span class="line">        out.close();</span><br><span class="line">        <span class="hljs-keyword">return</span> encryptedData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="hljs-comment">     * 私钥加密</span></span><br><span class="line"><span class="hljs-comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="hljs-comment">     * </span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 源数据</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> privateKey 私钥(BASE64编码)</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] encryptByPrivateKey(<span class="hljs-keyword">byte</span>[] data, String privateKey) <span class="hljs-keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] keyBytes = Base64Util.decode(privateKey);</span><br><span class="line">        PKCS8EncodedKeySpec pkcs8KeySpec = <span class="hljs-keyword">new</span> PKCS8EncodedKeySpec(keyBytes);</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</span><br><span class="line">        Key privateK = keyFactory.generatePrivate(pkcs8KeySpec);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, privateK);</span><br><span class="line">        <span class="hljs-keyword">int</span> inputLen = data.length;</span><br><span class="line">        ByteArrayOutputStream out = <span class="hljs-keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="hljs-keyword">int</span> offSet = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] cache;</span><br><span class="line">        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-comment">// 对数据分段加密</span></span><br><span class="line">        <span class="hljs-keyword">while</span> (inputLen - offSet &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (inputLen - offSet &gt; MAX_ENCRYPT_BLOCK) &#123;</span><br><span class="line">                cache = cipher.doFinal(data, offSet, MAX_ENCRYPT_BLOCK);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                cache = cipher.doFinal(data, offSet, inputLen - offSet);</span><br><span class="line">            &#125;</span><br><span class="line">            out.write(cache, <span class="hljs-number">0</span>, cache.length);</span><br><span class="line">            i++;</span><br><span class="line">            offSet = i * MAX_ENCRYPT_BLOCK;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] encryptedData = out.toByteArray();</span><br><span class="line">        out.close();</span><br><span class="line">        <span class="hljs-keyword">return</span> encryptedData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="hljs-comment">     * 获取私钥</span></span><br><span class="line"><span class="hljs-comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="hljs-comment">     * </span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keyMap 密钥对</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getPrivateKey</span><span class="hljs-params">(Map&lt;String, Object&gt; keyMap)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Key key = (Key) keyMap.get(PRIVATE_KEY);</span><br><span class="line">        <span class="hljs-keyword">return</span> Base64Util.encode(key.getEncoded());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="hljs-comment">     * 获取公钥</span></span><br><span class="line"><span class="hljs-comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="hljs-comment">     * </span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keyMap 密钥对</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getPublicKey</span><span class="hljs-params">(Map&lt;String, Object&gt; keyMap)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Key key = (Key) keyMap.get(PUBLIC_KEY);</span><br><span class="line">        <span class="hljs-keyword">return</span> Base64Util.encode(key.getEncoded());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 使用示例</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception </span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String publicKey = <span class="hljs-keyword">null</span>;</span><br><span class="line">        String privateKey = <span class="hljs-keyword">null</span>;</span><br><span class="line">        String password = <span class="hljs-string">"SYSTEX"</span>;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; keyMap = RSAUtil.genKeyPair(password);</span><br><span class="line">        publicKey = RSAUtil.getPublicKey(keyMap);</span><br><span class="line">        privateKey = RSAUtil.getPrivateKey(keyMap);</span><br><span class="line">        System.err.println(<span class="hljs-string">"公钥: \n\r"</span> + publicKey);</span><br><span class="line">        System.err.println(<span class="hljs-string">"私钥： \n\r"</span> + privateKey);</span><br><span class="line">    </span><br><span class="line">        System.err.println(<span class="hljs-string">"公钥加密——私钥解密"</span>);</span><br><span class="line">        String source = <span class="hljs-string">"这是一行没有任何意义的文字，你看完了等于没看，不是吗？"</span>;</span><br><span class="line">        System.out.println(<span class="hljs-string">"\r加密前文字：\r\n"</span> + source);</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] data = source.getBytes(<span class="hljs-string">"utf-8"</span>);</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] encodedData = RSAUtil.encryptByPublicKey(data, publicKey);</span><br><span class="line">        System.out.println(<span class="hljs-string">"加密后文字：\r\n"</span> + Hex.encodeHexString(encodedData));</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] decodedData = RSAUtil.decryptByPrivateKey(encodedData, privateKey);</span><br><span class="line">        String target = <span class="hljs-keyword">new</span> String(decodedData);</span><br><span class="line">        System.out.println(<span class="hljs-string">"解密后文字: \r\n"</span> + target);</span><br><span class="line">    </span><br><span class="line">        System.err.println(<span class="hljs-string">"私钥加密——公钥解密"</span>);</span><br><span class="line">        String source2 = <span class="hljs-string">"这是一行测试RSA数字签名的无意义文字"</span>;</span><br><span class="line">        System.out.println(<span class="hljs-string">"原文字：\r\n"</span> + source2);</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] data2 = source2.getBytes();</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] encodedData2 = RSAUtil.encryptByPrivateKey(data2, privateKey);</span><br><span class="line">        System.out.println(<span class="hljs-string">"加密后：\r\n"</span> + Hex.encodeHexString(encodedData2));</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] decodedData2 = RSAUtil.decryptByPublicKey(encodedData2, publicKey);</span><br><span class="line">        String target2 = <span class="hljs-keyword">new</span> String(decodedData2);</span><br><span class="line">        System.out.println(<span class="hljs-string">"解密后: \r\n"</span> + target2);</span><br><span class="line">        System.err.println(<span class="hljs-string">"私钥签名——公钥验证签名"</span>);</span><br><span class="line">        String sign = RSAUtil.sign(encodedData2, privateKey);</span><br><span class="line">        System.err.println(<span class="hljs-string">"签名:\r"</span> + sign);</span><br><span class="line">        <span class="hljs-keyword">boolean</span> status = RSAUtil.verify(encodedData2, publicKey, sign);</span><br><span class="line">        System.err.println(<span class="hljs-string">"验证结果:\r"</span> + status);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;AES加解密（对称加密算法）&lt;/strong&gt;&lt;br&gt;高级加密标准（英语：Advanced Encryption Standard，缩写：AES），是一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。那么为什么原来的DES会被取代呢，原因就在于其使用56位密钥，比较容易被破解。而AES可以使用128、192、和256位密钥，并且用128位分组加密和解密数据，相对来说安全很多。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>编程机器人游戏攻略</title>
    <link href="http://yoursite.com/2019/09/24/game-%E7%BC%96%E7%A8%8B%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B8%B8%E6%88%8F%E6%94%BB%E7%95%A5/"/>
    <id>http://yoursite.com/2019/09/24/game-编程机器人游戏攻略/</id>
    <published>2019-09-24T07:15:23.715Z</published>
    <updated>2016-08-06T03:00:56.651Z</updated>
    
    <content type="html"><![CDATA[<p>这里给程序猿们推荐一款和编程有关的小游戏：编程机器人或点灯机器人，个人觉得非常不错，玩这个游戏的关键是找出相似路线，把相似路线封装成方法不断调用，下面是不同关卡的攻略，哪位高手有更好的方法，欢迎指教。</p><a id="more"></a> <img src="/images/game/game-1.jpg"><img src="/images/game/game-2.jpg"><img src="/images/game/game-3.jpg"><img src="/images/game/game-4.jpg"><img src="/images/game/game-5.jpg"><img src="/images/game/game-6.jpg"><img src="/images/game/game-7.jpg"><img src="/images/game/game-8.jpg"><img src="/images/game/game-9.jpg">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里给程序猿们推荐一款和编程有关的小游戏：编程机器人或点灯机器人，个人觉得非常不错，玩这个游戏的关键是找出相似路线，把相似路线封装成方法不断调用，下面是不同关卡的攻略，哪位高手有更好的方法，欢迎指教。&lt;/p&gt;
    
    </summary>
    
    
      <category term="game" scheme="http://yoursite.com/categories/game/"/>
    
    
      <category term="game" scheme="http://yoursite.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>flume-拦截器详解</title>
    <link href="http://yoursite.com/2019/09/24/flume-%E6%8B%A6%E6%88%AA%E5%99%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/09/24/flume-拦截器详解/</id>
    <published>2019-09-24T07:15:23.714Z</published>
    <updated>2016-08-04T13:47:45.730Z</updated>
    
    <content type="html"><![CDATA[<h3 id="拦截器介绍"><a href="#拦截器介绍" class="headerlink" title="拦截器介绍"></a>拦截器介绍</h3><p>一个拦截器的功能可以被概括为这个方法：<br>    public Event intercept(Event event);</p><p>它传入一个event然后返回一个event。它可以不做任何事情；也就是说没有任何改变的event将被返回。通常来说，它用一些有用的方式来改变event的内容。如果返回null值，这个event就表示被丢弃了。</p><a id="more"></a> <p>要往source上添加拦截器，只需要添加interceptors属性到该source上。例如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">agent.sources.s1.interceptors=i1 i2 i3</span><br></pre></td></tr></table></figure><p>这里在名为s1的source上定义了三个拦截器，i1、i2和i3</p><p>【拦截器按他们的排列顺序运行。在前面这个例子中，i2将接收i1的输出。I3将接收i2的输出。最后channel选择器接收i3的输出。】</p><p>现在我们已经定义了拦截器的名字，我们需要通过如下方式指定他们的类型：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">agent.sources.s1.interceptors.i1.type=TYPE1 </span><br><span class="line">agent.sources.s1.interceptors.i1.additionalProperty1=VALUE</span><br><span class="line">agent.sources.s1.interceptors.i2.type=TYPE2 </span><br><span class="line">agent.sources.s1.interceptors.i3.type=TYPE3</span><br></pre></td></tr></table></figure><p>让我们看看它们中的一些拦截器，由Flume自带的，来看看有什么更好的方式来配置他们。</p><hr><h4 id="1-Timestamp拦截器"><a href="#1-Timestamp拦截器" class="headerlink" title="(1) Timestamp拦截器"></a>(1) Timestamp拦截器</h4><p>Timestamp拦截器，正如它名字暗示的，在Flume event的header中添加一个timestamp的key，<br>如果这个key值还不存在的话。要使用它，设置type属性值为timestamp即可。<br>如果event的header中已经包含了一个timestamp的key，它将用当前时间来覆盖这个值，<br>除非你设置preserveExisting属性的值为true来保护原有的值。</p><p>如果我们只想在header中不存在timestamp时添加该属性，那么这里有一个对source来说看起来相对完整的拦截器配置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">agent.sources.s1.interceptors=i1 </span><br><span class="line">agent.sources.s1.interceptors.i1.type=timestamp </span><br><span class="line">agent.sources.s1.interceptors.i1.preserveExisting=true</span><br></pre></td></tr></table></figure><h4 id="2-Host拦截器"><a href="#2-Host拦截器" class="headerlink" title="(2) Host拦截器"></a>(2) Host拦截器</h4><p>和Timestamp拦截器基本类似，Host拦截器将在当前Flume agent 的event的header中添加IP地址。<br>要使用它，设置type属性为host即可。<br>agent.sources.s1.interceptors=i1<br>agent.sources.s1.interceptors.type=host</p><p>如果我们只想在header中添加一个relayHost的key，通过DNS反向查找得到的hostname作为value值，<br>那么这里有一个对source来说看起来相对完整的拦截器配置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">agent.sources.s1.interceptors=i1 </span><br><span class="line">agent.sources.s1.interceptors.i1.type=host </span><br><span class="line">agent.sources.s1.interceptors.i1.hostHeader=relayHost </span><br><span class="line">agent.sources.s1.interceptors.i1.useIP=false</span><br></pre></td></tr></table></figure><h4 id="3-Static拦截器"><a href="#3-Static拦截器" class="headerlink" title="(3) Static拦截器"></a>(3) Static拦截器</h4><p>Static拦截器是用来往经过的所有Flume event的header中插入单个任何形式的key/value的。如果需要插入多个key/value值，<br>你只需要添加更多的static拦截器即可。不像我们已经见过的其他拦截器，默认情况下该拦截器会保留已经存在的key的值。<br>就像以往的一样，我建议你指定具体的值而非依赖默认值</p><p>最后，让我们看一下假设在先前不存在这两个值的情况下插入两个新的header值的例子：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">agent.sources.s1.interceptors=pos env </span><br><span class="line">agent.sources.s1.interceptors.pos.type=static </span><br><span class="line">agent.sources.s1.interceptors.pos.key=pointOfSale </span><br><span class="line">agent.sources.s1.interceptors.pos.value=US </span><br><span class="line">agent.sources.s1.interceptors.env.type=static </span><br><span class="line">agent.sources.s1.interceptors.env.key=environment </span><br><span class="line">agent.sources.s1.interceptors.env.value=staging</span><br></pre></td></tr></table></figure><h4 id="4-正则表达式过滤拦截器"><a href="#4-正则表达式过滤拦截器" class="headerlink" title="(4) 正则表达式过滤拦截器"></a>(4) 正则表达式过滤拦截器</h4><p>如果你想要依据body的内容来过滤event，正则表达式过滤拦截器对你来说很有用。根据你提供的正则表达式，<br>它将会筛选出符合条件的event或者只保留符合条件的event。让我们从设置type属性值为regex_filter开始。<br>你想匹配的表达需要使用Java格式的正则表达式来书写。</p><p>正则表达式字符串是在regex属性中设置的。最后，你需要通过设置excludeEvents<br>属性为true告诉拦截器你想要排除匹配正则表达式的event。默认值（false）说明你只想要可以匹配正则表达式的event。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在这个例子中，任何包含“NullPointerException”字符串的event都会被丢弃掉：</span><br><span class="line">agent.sources.s1.interceptors=npe </span><br><span class="line">agent.sources.s1.interceptors.npe.type=regex_filter </span><br><span class="line">agent.sources.s1.interceptors.npe.regex=NullPointerException </span><br><span class="line">agent.sources.s1.interceptors.npe.excludeEvents=true</span><br></pre></td></tr></table></figure><h4 id="5-正则表达式提取拦截器"><a href="#5-正则表达式提取拦截器" class="headerlink" title="(5) 正则表达式提取拦截器"></a>(5) 正则表达式提取拦截器</h4><p>有时候你想要提取event body中的部分二进制数据到Flume header中，这样你就可以通过channel选择区来路由event了。<br>你可以使用正则表达式提取拦截器来完成这个操作。我们通过设置type属性值为regex_extractor开始：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">agent.sources.s1.interceptors=e1 </span><br><span class="line">agent.sources.s1.interceptors.e1.type=regex_extractor</span><br></pre></td></tr></table></figure><p>像正则表达式过滤拦截器一样，正则表达式提取拦截器也使用Java格式的正则表达式来书写。<br>为了提取一到多个片段，你需要从设置regex属性值为一组匹配的括号开始。<br>让我们假设我们想要查找出event中的错误数量，格式为“Error:N”（N为数字）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">agent.sources.s1.interceptors=e1 </span><br><span class="line">agent.sources.s1.interceptors.e1.type=regex_extractor </span><br><span class="line">agent.sources.s1.interceptors.e1.regex=Error:\\s(\\d+)</span><br></pre></td></tr></table></figure><p>正如你看到的我把捕获数字的正则放在括号中，可以包含一到多个数字。现在我可以匹配我想要的表达式，我需要告诉Flume我应该用这个表达式做什么。这里我们需要介绍下serializers ，它提供了一种可插拔的机制去解释每个表达式。在这个例子中我只需要一个匹配值，所以我用空格分隔的序列化列表只有一个值：<br>【注意java格式的正则表达式中，符号 \ 需要转义：\】</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">agent.sources.s1.interceptors=e1 </span><br><span class="line">agent.sources.s1.interceptors.e1.type=regex_extractor </span><br><span class="line">agent.sources.s1.interceptors.e1.regex=Error:\\s(\\d+) </span><br><span class="line">agent.sources.s1.interceptors.e1.serializers=ser1 </span><br><span class="line">agent.sources.s1.interceptors.e1.serializers.ser1.type=default //可以不要这个默认设置 </span><br><span class="line">agent.sources.s1.interceptors.e1.serializers.ser1.name=error_no</span><br></pre></td></tr></table></figure><p>name属性指定了event的key值，而value的内容则用来匹配正则表达式。Type属性的值为default（如果没有指定默认也是default）是一个简单的直接通过的序列化器。比如下面的event body：<br>NullPointerException: A problem occurred. Error: 123. TxnID: 5X2T9E.</p><p>下面的header将会被添加到event中：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;error_no&quot;:&quot;123&quot; &#125;</span><br></pre></td></tr></table></figure><p>如果我想把TxnID的值添加到header中，我仅仅需要增加另一组正则匹配和序列化器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">agent.sources.s1.interceptors=e1 </span><br><span class="line">agent.sources.s1.interceptors.e1.type=regex_extractor </span><br><span class="line">agent.sources.s1.interceptors.e1.regex=Error:\\s(\\d+).*TxnID:\\s(\\w+)</span><br><span class="line">agent.sources.s1.interceptors.e1.serializers=ser1 ser2 </span><br><span class="line">agent.sources.s1.interceptors.e1.serializers.ser1.type=default </span><br><span class="line">agent.sources.s1.interceptors.e1.serializers.ser1.name=error_no </span><br><span class="line">agent.sources.s1.interceptors.e1.serializers.ser2.type=default   //可以不要这个默认设置</span><br><span class="line">agent.sources.s1.interceptors.e1.serializers.ser2.name=txnid</span><br></pre></td></tr></table></figure><p>对于前面的输入内容，将会加上如下的header值：<br>{ “error_no”:”123”， “txnid”:”5x2T9E” }</p><p>然而，如果内容颠倒了，像这样：NullPointerException: A problem occurred. TxnID: 5X2T9E. Error: 123.我最终只会得到TxnID这一个header。一个处理这种情形更好的方式就是使用多重拦截器这样命令就不会有问题了：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">agent.sources.s1.interceptors=e1 e2 </span><br><span class="line">agent.sources.s1.interceptors.e1.type=regex_extractor </span><br><span class="line">agent.sources.s1.interceptors.e1.regex=Error:\\s(\\d+) </span><br><span class="line">agent.sources.s1.interceptors.e1.serializers=ser1 </span><br><span class="line">agent.sources.s1.interceptors.e1.serializers.ser1.type=default </span><br><span class="line">agent.sources.s1.interceptors.e1.serializers.ser1.name=error_no </span><br><span class="line">agent.sources.s1.interceptors.e2.type=regex_extractor </span><br><span class="line">agent.sources.s1.interceptors.e2.regex=TxnID:\\s(\\w+) </span><br><span class="line">agent.sources.s1.interceptors.e2.serializers=ser1 </span><br><span class="line">agent.sources.s1.interceptors.e2.serializers.ser1.type=default </span><br><span class="line">agent.sources.s1.interceptors.e2.serializers.ser1.name=txnid</span><br></pre></td></tr></table></figure><p>除了直接通过的default序列化器，Flume系统自带的另外唯一一个序列化实现就是需要指定全局限定类名的org.apache.flume.interceptor.RegexExtractorInterceptorMillisSerializer。<br>这个序列化器用来将时间转化回毫秒的。你需要基于org.joda.time.format.DateTimeFormat正则来指定对应的正则表达式属性。</p><p>比如，我们假设你正在提取Apache网站服务器的日志。例如：<br>192.168.1.42 - - [29/Mar/2013:15:27:09 -0600] “GET /index.html HTTP/1.1” 200 1037<br>对这个数据完整的正则表达式可能像这样（以Java字符串的形式，带有反斜杠和用反斜杠转义的引号）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^([\\d.]+) \\S+ \\S+ \\[([\\w:/]+\\s[+\\-]\\d&#123;4&#125;)\\] \&quot;(.+?)\&quot; (\\d&#123;3&#125;) (\\d+)</span><br></pre></td></tr></table></figure><p>这个时间正则表达式完全符合org.joda.time.format.DateTimeFormat正则的形式：<br>yyyy/MMM/dd:HH:mm:ss Z</p><p>这会让我们的配置文件变得和下面这个片段类似：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">agent.sources.s1.interceptors=e1 </span><br><span class="line">agent.sources.s1.interceptors.e1.type=regex_extractor </span><br><span class="line">agent.sources.s1.interceptors.e1.regex=^([\\d.]+) \\S+ \\S+ \\ [([\\w:/]+\\s[+\\-]\\d&#123;4&#125;)\\] \&quot;(.+?)\&quot; (\\d&#123;3&#125;) (\\d+)</span><br><span class="line">agent.sources.s1.interceptors.e1.serializers=ip dt url sc bc </span><br><span class="line">agent.sources.s1.interceptors.e1.serializers.ip.name=ip_address </span><br><span class="line">agent.sources.s1.interceptors.e1.serializers.dt.type=org.apache.flume. interceptor.RegexExtractorInterceptorMillisSerializer</span><br><span class="line">agent.sources.s1.interceptors.e1.serializers.dt.pattern=yyyy/MMM/ dd:HH:mm:ss Z </span><br><span class="line">agent.sources.s1.interceptors.e1.serializers.dt.name=timestamp </span><br><span class="line">agent.sources.s1.interceptors.e1.serializers.url.name=http_request</span><br><span class="line">agent.sources.s1.interceptors.e1.serializers.sc.name=status_code </span><br><span class="line">agent.sources.s1.interceptors.e1.serializers.bc.name=bytes_xfered</span><br></pre></td></tr></table></figure><p>这将对前文的内容产生如下的header信息：<br>{ “ip_address”:”192.168.1.42”， “timestamp”:”1364588829”， “http_request”:”GET /index.html HTTP/1.1”， “status_code”:”200”， “bytes_xfered”:”1037” }</p><p>【在拦截器中没有重写检查。例如，使用timestamp作为key值将会覆盖event之前存在的时间，如果存在的话】</p><h4 id="6-自定义拦截器"><a href="#6-自定义拦截器" class="headerlink" title="(6) 自定义拦截器"></a>(6) 自定义拦截器</h4><p>如果你有你点想要添加进你Flume实现中的自定义代码，它很大可能是一个自定义拦截器。如之前提到的，你需要实现org.apache.flume.interceptor.Interceptor接口以及关联的org.apache.flume.interceptor.Interceptor.Builder接口。<br>假设我需要对我event的body的内容进行URL编码。代码可能如下方所示：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">URLDecode</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Event <span class="hljs-title">intercept</span><span class="hljs-params">(Event event)</span> </span>&#123; </span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-keyword">byte</span>[] decoded = URLDecoder.decode(<span class="hljs-keyword">new</span> String(event.getBody())， <span class="hljs-string">"UTF-8"</span>).getBytes(<span class="hljs-string">"UTF-8"</span>);</span><br><span class="line">event.setBody(decoded);</span><br><span class="line">&#125; <span class="hljs-keyword">catch</span> UnsupportedEncodingException e) &#123;</span><br><span class="line"><span class="hljs-comment">// This shouldn't happen. Fall through to unaltered event.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> event;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Event&gt; <span class="hljs-title">intercept</span><span class="hljs-params">(List&lt;Event&gt; events)</span> </span>&#123; </span><br><span class="line"><span class="hljs-keyword">for</span> (Event event:events) &#123;</span><br><span class="line">intercept(event);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> events;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Builder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interceptor</span>.<span class="hljs-title">Builder</span> </span>&#123; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Interceptor <span class="hljs-title">build</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> URLDecode();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(Context context)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后如果要配置我的新拦截器，对Builder类使用类似如下格式的FQDN（完全限定域名）来作为type属性的值：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">agent.sources.s1.interceptors=i1 </span><br><span class="line">agent.sources.s1.interceptors.i1.type=com.example.URLDecoder$Builder</span><br></pre></td></tr></table></figure><p>对于如何传递和验证属性值的例子，可以去看Flume source部分已经实现的拦截器的源码来寻找灵感。<br>请记住自定义拦截器中任何繁重的处理过程都将影响整体的吞吐量，所以请注意自定义拦截器中对象的生成和密集的计算工作。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;拦截器介绍&quot;&gt;&lt;a href=&quot;#拦截器介绍&quot; class=&quot;headerlink&quot; title=&quot;拦截器介绍&quot;&gt;&lt;/a&gt;拦截器介绍&lt;/h3&gt;&lt;p&gt;一个拦截器的功能可以被概括为这个方法：&lt;br&gt;    public Event intercept(Event event);&lt;/p&gt;
&lt;p&gt;它传入一个event然后返回一个event。它可以不做任何事情；也就是说没有任何改变的event将被返回。通常来说，它用一些有用的方式来改变event的内容。如果返回null值，这个event就表示被丢弃了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="flume" scheme="http://yoursite.com/categories/flume/"/>
    
    
      <category term="flume" scheme="http://yoursite.com/tags/flume/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch-集群安装</title>
    <link href="http://yoursite.com/2019/09/24/elesticsearch-%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/09/24/elesticsearch-集群安装/</id>
    <published>2019-09-24T07:15:23.712Z</published>
    <updated>2016-08-18T15:34:10.673Z</updated>
    
    <content type="html"><![CDATA[<p>这里假如有两个节点：node-1、node-2<br>配置：elasticsearch.yml</p><a id="more"></a> <p>node-1:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: liang</span><br><span class="line">node.name: node-1</span><br><span class="line">bootstrap.mlockall: true</span><br><span class="line">network.host: master</span><br><span class="line">network.publish_host: master</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;slave1&quot;]</span><br><span class="line">path.data: /usr/local/install_soft/elasticsearch-2.3.4/data</span><br><span class="line">path.logs: /usr/local/install_soft/elasticsearch-2.3.4/logs</span><br></pre></td></tr></table></figure><p>node-2:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: liang</span><br><span class="line">node.name: node-2</span><br><span class="line">bootstrap.mlockall: true</span><br><span class="line">network.host: slave1</span><br><span class="line">network.publish_host: slave1</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;master&quot;]</span><br><span class="line">path.data: /usr/local/install_soft/elasticsearch-2.3.4/data</span><br><span class="line">path.logs: /usr/local/install_soft/elasticsearch-2.3.4/logs</span><br></pre></td></tr></table></figure><p>注意：<br>1、所有的配置前面空一个空字符<br>2、配置格式  key: value，value前面空一个空字符<br>如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: sbt_general_app</span><br></pre></td></tr></table></figure><p><strong>扩展:</strong><br>只需要修改discovery.zen.ping.unicast.hosts属性，其内的值不需要是全部运行节点的ip，只需要任意一台运行中的IP即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里假如有两个节点：node-1、node-2&lt;br&gt;配置：elasticsearch.yml&lt;/p&gt;
    
    </summary>
    
    
      <category term="elasticsearch" scheme="http://yoursite.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/09/24/hello-world/"/>
    <id>http://yoursite.com/2019/09/24/hello-world/</id>
    <published>2019-09-24T06:50:56.130Z</published>
    <updated>2019-09-24T06:50:56.130Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="hljs-string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>简单之美</title>
    <link href="http://yoursite.com/2019/09/24/%E7%AE%80%E5%8D%95%E4%B9%8B%E7%BE%8E/"/>
    <id>http://yoursite.com/2019/09/24/简单之美/</id>
    <published>2019-09-24T01:10:10.000Z</published>
    <updated>2019-09-24T13:33:26.607Z</updated>
    
    <content type="html"><![CDATA[<p>我们遇到问题时，时不时会谷歌或百度一下，谷歌或百度能在毫秒级时间内响应结果网页，我们不禁会想谷歌或百度是不是使用了什么特别复杂厉害的算法，才能到达如此的快速响应。我们先看看建立一个搜索引擎大致需要做这样的几件事：自动下载互联网上的网页；建立快速有效的索引；根据相关性对网页进行公平准确的排序。一个高质量的搜索引擎要实现这3件事都不容易，但是呢，搜索引擎的基本原理还是相对简单的。我们平时使用的计算机可以处理复杂的逻辑计算，但其底层采用的是最简单的二进制计数方法，它只有两个数字：0和1。二进制除了是一种计数方法外，它还可以表示逻辑的 “是” 与 “非”，这个特征在搜索引擎的索引中非常有用。布尔运算是针对二进制的，它很简单，可能没有比布尔运算更简单的运算了。搜索引擎的实现，从根本上就离不开布尔运算的框架。</p><a id="more"></a> <center><img src="/images/architecture/simple_beauty/simple_beauty.png"></center><p>布尔运算具有以下特点。布尔运算的元素只有两个：1（TRUE，真），0（FALSE，假）。基本的运算只有3种：与（AND）、或（OR）、非（NOT）。其对应的真值表如下：</p><p>与运算-真值表</p><p>AND | &nbsp;&nbsp; 1 &nbsp;&nbsp; | &nbsp;&nbsp; 0 &nbsp;&nbsp;<br>—|—|—|—<br><strong>1</strong> | &nbsp;&nbsp; 1 &nbsp;&nbsp; | &nbsp;&nbsp; 0 &nbsp;&nbsp;<br><strong>0</strong> | &nbsp;&nbsp; 0 &nbsp;&nbsp; | &nbsp;&nbsp; 0 &nbsp;&nbsp;</p><p>或运算-真值表</p><p>OR | &nbsp;&nbsp; 1 &nbsp;&nbsp; | &nbsp;&nbsp; 0 &nbsp;&nbsp;<br>—|—|—|—<br><strong>1</strong> | &nbsp;&nbsp; 1 &nbsp;&nbsp; | &nbsp;&nbsp; 1 &nbsp;&nbsp;<br><strong>0</strong> | &nbsp;&nbsp; 1 &nbsp;&nbsp; | &nbsp;&nbsp; 0 &nbsp;&nbsp;</p><p>非运算-真值表</p><p>NOT | &nbsp;<br>—|—|—|—<br><strong>1</strong> | &nbsp;&nbsp; 0 &nbsp;&nbsp;<br><strong>0</strong> | &nbsp;&nbsp; 1 &nbsp;&nbsp;</p><p>在讲搜索引擎的基本原理之前，先看一个例子：如果你是图书馆管理员，如何才能让读者快速有效的找到一本书，你肯定会注意到，那就是为每一本书打上索引标签，我们不可能在图书馆书架上一本本地找，而是通过搜索索引标签定位到它的位置，然后直接去书架上拿。我们可以把一个网页比当做一本书，那接下来就要为网页创建索引，最简单的索引结构是用一个很长的二进制数表示一个关键字是否出现在网页中，每一位对应一个网页，1 代表相应的网页包含这个关键字，0 代表没有。比如关键字 “简单” 对应的二进制数是 0100000101…，表示第二、第八、第十个网页包含这个关键字。同样，假定 “架构” 对应的二进制数是 0100110011…，那么要找到同时包含 “简单” 和 “架构” 的网页时，只需要将这两个二进制数进行布尔运算AND。根据上面的真值表，可以得到结果为 0100000001…，表示第二、第十个网页满足需求，而计算机做布尔运算的速度是非常快的，所以我们使用搜索引擎时，能够快速的搜索到想要的结果。然而互联网上的网页数量是庞大的，由于这些二进制数中的绝大部分位数都是 0，只需要记录那些等于 1的位数即可。这样，搜索引擎的索引就变成了一张大表：表的每一行对应一个关键字，每个关键字后面跟着一组二进制数字，包含了该关键字的网页索引号（这种索引的结构设计，也称 “倒排索引”）。当然，要设计和实现一个高质量的搜索引擎远还是非常复杂的，但是原理上还是相对简单的，即等价于布尔运算。</p><p>布尔运算非常简单，但是对搜索引擎的实现有着重大意义，这让我们感受到了简单之美。在实际开发产品的解决方案中，首选的做法是采取简单的实现方式。问题的复杂度要与解决问题的方法及成本相匹配，尽量的保持问题解决方案的简单，我们认为复杂问题只是一系列小而简问题的集合。本章和大家探讨一下如何把大事化小，从而达到事倍功半。下面从6个规则来分别讲诉“如何简化”，有的规则比较宏观，适用多种场景，有的规则比较微观，只适用特定场景。</p><h3 id="规则1-避免复杂设计"><a href="#规则1-避免复杂设计" class="headerlink" title="规则1-避免复杂设计"></a>规则1-避免复杂设计</h3><ul><li><strong>内容</strong>：在设计中要警惕复杂的解决方案。</li><li><strong>场景</strong>：适用于任何项目的设计中，特别是庞大而复杂的系统或项目。</li><li><strong>用法</strong>：当设计出解决方案时，通过测试同事是否能够容易理解和实现你的方案，来验证是否存在复杂设计。</li><li><strong>原因</strong>：复杂的解决方案在实现和维护上成本高（包括人力成本和时间成本）。</li><li><strong>要点</strong>：过度复杂的系统限制了可扩展性。简单的系统易维护、易扩展、成本低。</li></ul><p>关于复杂设计，主要包括两方面，一是系统或项目结构的复杂性，一是业务逻辑的复杂性。</p><p>（1）结构复杂的系统可以归为具有两个特点：组成复杂系统的组件数量过多，同时这些组件之间的关系依赖过于复杂。如果组件的抽象程度和具体程度没有设计好，很容易面临牵一发而动全身的局面。<br>结构复杂有如下缺点：<br>&nbsp;&nbsp; a、组件越多，某个组件出现故障的概率也就越大，从而越容易导致系统故障。<br>&nbsp;&nbsp; b、组件关系依赖越复杂，当某个组件有变动时，会影响所有和它有关系的其它组件，同样这些被影响的组件也会递归性的影响更多的组件。<br>&nbsp;&nbsp; c、定位一个复杂系统的问题比简单系统更加困难，在排查问题时，需要对所有相关组件都要逐一排查，降低解决问题的效率。</p><p>（2）逻辑复杂的系统的一个典型特点是单个组件承担了太多的功能。以电商系统为例，常见的功能有：商品管理、库存管理、订单管理、用户管理、支付、物流、客服……如果把这些功能都放在一个组件上实现，可想而知，这个组件简直就是一个巨型、笨重的巨无霸。逻辑复杂的另外一个典型特点是采用了复杂的处理算法，复杂处理算法导致的问题主要是理解上，从而导致难以实现、难以维护。</p><p>复杂设计是可扩展性的大敌之一。设计的越复杂，问题也就越多，越不易于后续的扩展。有一个好方法可以验证解决方案是否过于复杂，把解决方案展现给不同的技术团队，如果每个技术团队都能够轻松理解方案，并可以向其他人描述该方案，那就可以采用该方案，如果有其中一个技术团队表示不理解，那就要针对该方案是否过于复杂而进行辩论或调整。所以架构设计时谨遵一句话：Keep It Simple! 如果使用简单的解决方案就可以满足需求，那就选择简单方案。</p><h3 id="规则2-方案中包含可扩展"><a href="#规则2-方案中包含可扩展" class="headerlink" title="规则2-方案中包含可扩展"></a>规则2-方案中包含可扩展</h3><ul><li><p><strong>内容</strong>：提供及时可扩展性的DID方法。</p></li><li><p><strong>场景</strong>：适用于任何项目的设计中，是保证可扩展性的最经济有效的方法（资源和时间）。</p></li><li><p><strong>用法</strong>：</p><pre><code>1.Design（D）设计20倍的容量。2.Implement（I）实施3倍的容量。3.Deploy（D）部署1.5倍的容量。</code></pre></li><li><p><strong>原因</strong>：DID为产品扩展提供了经济、有效、及时的方法。</p></li><li><p><strong>要点</strong>：在项目设计早期考虑扩展可以帮助团队节省时间和金钱，在需求发生大约一个月前实现功能，在客户蜂拥而至的前几天部署。</p></li></ul><p>我们经常遇到的一个问题是 “什么时候该在扩展上投入”，有些轻率的答案是，最好是在需要的前一天投入和部署，因为这样才能使得这笔投资的价值最大化，用最少的钱换取最大的收益，有助于公司财务和股东利益最大化。但是很遗憾，这是不现实的，及时投入和部署根本就不可能，而且会带来很大风险，影响及时投入和部署的因素有：无法确定的具体时间、无法预测的具体流量、无法感知的竞争波动等。<br>我们虽然不能做到及时投入和部署，但是我们尽可能的靠近 “实时”。这里采用AKF合伙公司在思考可扩展性时用的DID（设计-实施-部署）方法。这3个步骤和总所周知的认知阶段一致：思考问题和设计方案，为方案构建系统和代码实现，最后是安装和部署。<br><em>表：扩展的DID过程</em></p><table><thead><tr><th>&nbsp;</th><th>设计</th><th>实施</th><th>部署</th></tr></thead><tbody><tr><td>扩展的目标</td><td>20倍~无限</td><td>3~20倍</td><td>1.5~3倍</td></tr><tr><td>智力成本</td><td>高</td><td>中</td><td>低到中</td></tr><tr><td>工程成本</td><td>低</td><td>高</td><td>中</td></tr><tr><td>资产成本</td><td>低</td><td>低到中</td><td>高到很高</td></tr><tr><td>总成本</td><td>低到中</td><td>中</td><td>中</td></tr></tbody></table><p>（1）设计（D，Design）<br>在项目的设计阶段，讨论和设计很明显要比我们在代码中实现该设计的成本更低，我们可以未雨绸缪，讨论好和草拟好如何扩展平台的设计。例如，最开始我们明显不想部署比现场的生产环境高出10倍、20倍甚至100倍的容量（这里的容量指的是系统的可扩展程度，包括：流量资源、计算资源、存储资源等），由于在设计阶段考虑扩展维度的成本比较低，建议在DID的D（设计）阶段聚焦在扩展到20倍到无限大之间。我们需要时刻进行 “头脑风暴”来思考和讨论 “大问题”，所以我们的智力成本很高。然而，我们不编写代码和部署昂贵的系统，所以工程成本和资产成本较低。最后我们归结到D阶段的总成本是低到中，所以我们应该好好利用该方法，在设计阶段发现和确定需要扩展的部分。</p><p>（2）实施（I，Implement）<br>设计方案确定后，我们可以开始编写代码实现设计。实施阶段是实现具体细节的阶段，建议在DID的I（实施）阶段实现当前规模的 3<del>20倍。“规模”在这里是指扩大最大瓶颈的系统组件，用以实现业务目标。可能在有些情况下，把一个组件的规模扩大100倍的成本与扩大20倍没有区别，如果是这样，我们可以一次完成该扩展的改变，而并非反复折腾。如随着用户数量的逐渐增大，平台需要基于用户属性（用户ID）取模来进行分库存储，把用户分散到多个（N个）数据库。我们可以定义一个可配置的变量User_Mod，其取值范围是1（现在）</del>5（预测3年内使用5个数据库存储），如果经过1年后，发现用户的增长速度大于预期值，则可以把User_Mod的取值范围改为1~10，这样就达到可以轻易的扩展规模。这种改变的实施成本确实不会随着规模N的的变化而变化，这类改变以工程成本计算很高，以智力成本计算中等，以资产成本计算低到中。最后我们归结到I阶段的总成本是中，该阶段主要涉及到代码的具体实现，需要把代码架构涉及为易于扩展，尽可能的使用可配置的方式达到扩容。</p><p>（2）部署（D，Deploy）<br>DID的最后阶段是部署（D）。仍以前面的用户取模为例，我们希望以及时的方式部署系统，没有理由因为资产空闲而稀释股东的价值。该阶段的资产成本往往是最高的，部署相当于现有规模100倍的系统将会使很多公司破产，建议在该阶段的扩容提高到1.5~3倍（根据实际情况而定，如果是超高增长的公司，可以考虑提高到5倍）。然而，我们没有必要把33%甚至更多的的资源放在那里等待突然爆发的用户活动，云计算就是一个用来应付突发请求的不错选择。记住，扩展要具有弹性，它既可以扩展也可以收缩，随着用户流量的变动而调整容量。</p><p>对于可扩展的设计和思考的成本相对较低，因此应该经常进行。对于实施阶段的成本是中等，应该考虑到代码架构的实现和扩容，尽可能的实现可配扩容。最后，就是部署阶段的基础设施的扩容，根据需要提前做好设备的订购准备，建议使用云服务，在接近所需和接近实时的情况下，快速的把所有服务部署运行起来。</p><h3 id="规则3-3次简化方案"><a href="#规则3-3次简化方案" class="headerlink" title="规则3-3次简化方案"></a>规则3-3次简化方案</h3><ul><li><p><strong>内容</strong>：在设计复杂系统时，从项目的范围、设计和实施角度简化方案。</p></li><li><p><strong>场景</strong>：当设计复杂系统或产品时，面临着技术和计算资源的限制。</p></li><li><p><strong>用法</strong>：</p><pre><code>1.采用帕累托（Pareto）原则简化范围。2.考虑成本优化和可扩展性来简化设计。3.依靠他人的经验来简化实施。</code></pre></li><li><p><strong>原因</strong>：只聚焦“不过度复杂”，并不能解决需求或历史发展与沿革中的各种问题。</p></li><li><p><strong>要点</strong>：在产品研发的各个阶段都需要做好简化。</p></li></ul><p>规则1是关于抑制某些方案过于复杂的冲动，而规则3这是关于采用什么方法来进一步简化方案，主要从3个方法来简化：如何简化方案范围？如何简化方案设计？如何简化方案实施？</p><p>（1）如何简化方案范围<br>对于这个简化问题的答案就是不断的应该用帕累托原则，也就是二八定理。如：“收益的80%来自于20%的工作”，也就是说“你收益的80%是由哪些20%的功能实现的？”，做的少同时取得显著的效益。也就是说要学会做“减法”，删除掉一些不必要的功能，最开始设计项目和产品时，避免设计的又全又大，把所有精力和注意力都放在最主要的功能上面。这样的好处是系统将会减少功能之间的依赖关系，可以更高效和更高本益比的进行扩展。借用马蒂·凯甘的理念 “最小化可行产品”，秉持着 “You Can Always Do Less”来简化方案范围。</p><p>（2）如何简化方案设计<br>简化设计于过度设计的复杂性密切相关，消除复杂性也就是忽略无关要紧的模块。简化设计是基于具体场景而定的，如：为了让请求及时响应，可以先在缓存中获取数据，缓存中没有再从数据库中获取，这就是缓存的应用。为了统计某个文件的单词频率，看起来可以使用流行的MapReduce算法来处理，但是如果只是一个小文件，就不必要使用重量级的MapReduce算法，直接使用一个简单的程序来实现更有道理。简单的说，简化设计的步骤要求易于理解、低成本、高效益和可扩展的方式来完成工作。</p><p>（3）如何简化方案实施<br>方案实施是方案的代码实现，这个也是基于具体场景来定的。如：某个问题，是使用递归还是循环来实现？某个解决方案，是自己研发还是使用开源项目？这些问题的答案都指向了一个公共主题：如何利用其它经验和已存在方案来简化方案实施。考虑到成本问题，我们应该首先寻找被广泛采用的开源项目满足需求，如果这些不存在，应该寻找本公司或其它组织内有类似解决方案经验的人来解决问题，如果都不存在，才考虑是否要自己研发来解决问题。</p><h3 id="规则4-减少域名解析"><a href="#规则4-减少域名解析" class="headerlink" title="规则4-减少域名解析"></a>规则4-减少域名解析</h3><ul><li><strong>内容</strong>：从用户角度减少域名解析次数。</li><li><strong>场景</strong>：对性能敏感的所有网页。</li><li><strong>用法</strong>：尽量减少下载页面所需的域名解析次数，但要保持于浏览器的并发连接数平衡。</li><li><strong>原因</strong>：域名解析耗时而且大量域名解析会影响用户体验。</li><li><strong>要点</strong>：减少对象、任务、计算等是加快页面加载输的的好办法，但要权衡浏览器的并发连接数。</li></ul><p>本规则让我们在用户的浏览器上考虑简化的问题。当你浏览一个网页时，使用浏览器的开发者工具（火狐firebug、chrome开发工具等）就会观察到一些有趣的结果。你会发现网页上的对象（html、图像、js、css等）的下载时间各不相同，而有一个额外的步骤就是域名解析。域名服务系统（DNS）是互联网中最重要的部分之一，它的作用是把一个域名（<a href="http://www.google.com）解析为对应的IP（x.x.x.x）。事实上，几乎所有的网页都是由许多不同的对象组成，浏览器就是基于此，通过并发连接同时下载过个对象。浏览器对每个服务器或网关代理的最大持久并发连接数有限制。根据HTTP/1.1" target="_blank" rel="noopener">www.google.com）解析为对应的IP（x.x.x.x）。事实上，几乎所有的网页都是由许多不同的对象组成，浏览器就是基于此，通过并发连接同时下载过个对象。浏览器对每个服务器或网关代理的最大持久并发连接数有限制。根据HTTP/1.1</a> RFC协议，这个最大值应该设置为2。但是，现在许多浏览器都忽略此限制，把最大值设置为6或者更大。</p><p>由此可见，网页上的域名解析次数越少，网页下载的性能就越好。但是把所有的对象都放在同一个域中会带来问题，那就是浏览器对同一个域的并发连接数做了限制。如何权衡域和浏览器的并发数量，我们在下一个规则中来探讨这个问题。</p><h3 id="规则5-减少页面目标"><a href="#规则5-减少页面目标" class="headerlink" title="规则5-减少页面目标"></a>规则5-减少页面目标</h3><ul><li><strong>内容</strong>：尽可能的减少网页上的对象数量。</li><li><strong>场景</strong>：对性能敏感的所有网页。</li><li><strong>用法</strong>：<pre><code>1.减少或者合并对象，但要平衡最大并发连接数。2.寻找机会减轻对象的重量。3.不断测试确保性能的提升。</code></pre></li><li><strong>原因</strong>：对象数量的多少直接影响网页的下载时间。</li><li><strong>要点</strong>：对象数量和浏览器并发连接数的平衡是一门科学，需要不断测量和调整。这是在易用性、可用性和性能之间的平衡。</li></ul><p>2009年谷歌发布了一份白皮书，声称测试表明搜索延迟如果增加400毫秒将每日搜索量减少大约0.6%，可以看出网页下载时间对于保住流量的重要性。一个网页包含许多不同的对象（html、图像、js、css等），浏览器会分别独立下载这些对象，而且是以并发的方式下载的。改进网页的第一个方法是减少对象的数量。大多数网页中下载比较耗时的是图像对象，如果一个网页的图像对象过多，如上百个，该网页的平均响应时间超过12秒，那该网站已经面临着损失有价值的流量。一个好的方法就是使用图像精灵，把一些小图像组合成一个大的图像，通过CSS来单独显示其中的任何一个图像，这样图像的请求数量会显著减少。当然，不是说把网页对象删除的越多越好，必须在把重要信息传达给客户的前提下，做好简化工作。</p><p>从上一个规则中，我们知道浏览器支持从单一域名同时下载多个对象，如果所有的元素都集中到一个对象中，那么浏览器的并发下载的能力就无法起作用，我们需要考虑把这些对象拆分为多个较小的对象，以便同时下载。</p><p>流量器对每个域名服务的并发连接数存在的资源限制。如果网页上的多有对象都来自单个域名，那么浏览器设置的最大连接数是多少，支持同时下载的对象就是多少。因此，最好把网页的内容拆分为合适多的对象数，以便利用浏览器的并发下载功能。有一种技巧就是把不同网页对象分别存储在不同的子域名上（例如：google.com,  static1.google.com, static2.google.com）。浏览器把这些当成不同的域名对待，允许每个子域名拥有自己的最大并发连接数。</p><p>理想的网页应该有多少个对象以及多大重量没有绝对的答案。提高网页性能和可扩展的关键是测试。这需要考虑很多因素，如尽可能的保持网页足够轻，在网页必须很重的情况下，采用Gzip压缩以减轻网页的传输压力，利用浏览器缓存、缩小文件、延迟加载等优化技术。总之，页面上的对象越少性能越好，当必须与其它因素平衡，通过不断测试和调整来优化达到最佳效果。</p><h3 id="规则6-采用同构网络"><a href="#规则6-采用同构网络" class="headerlink" title="规则6-采用同构网络"></a>规则6-采用同构网络</h3><ul><li><p><strong>内容</strong>：确保交换机和路由器源于同一供应商。</p></li><li><p><strong>场景</strong>：设计和扩大网络。</p></li><li><p><strong>用法</strong>：</p><pre><code>1.不要混合使用来自不同OEM的交换机和路由器。2.购买或者开源的其它网络设备（防火墙等）。</code></pre></li><li><p><strong>原因</strong>：不同供应商或品牌的设备存在兼容问题，混合使用导致不可用性和限制扩展性。</p></li><li><p><strong>要点</strong>：异构网络设备容易导致可用性和扩展性问题，选择单一供应商。</p></li></ul><p>几乎所有的网络设备供应商都声称在他们的设备上实现了标准协议，允许来自不同供应商的设备之间进行通信，但是许多供应商也在设备上实现了专有协议，如思科的增强型内部网关路由协议。做过网站开发的就知道同一个网页在IE、Firefox和Chrome等不同浏览器的上的呈现效果就会不一样，这就是按照同一标准的不同实现上会有多么的不同了。因此，建议使用同一供应商的网络设备，这样就避免出现兼容性的问题。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本章主要围绕简化这个主题来探讨了6个简化规则，如何防止复杂性（规则1），如何尽早考虑扩展（规则2），如何从初始需求到最终实施做出简化（规则3），如何减少域名解析次数和减少页面对象数量（规则4和5），如何保持网络的简单和同构（规则6）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们遇到问题时，时不时会谷歌或百度一下，谷歌或百度能在毫秒级时间内响应结果网页，我们不禁会想谷歌或百度是不是使用了什么特别复杂厉害的算法，才能到达如此的快速响应。我们先看看建立一个搜索引擎大致需要做这样的几件事：自动下载互联网上的网页；建立快速有效的索引；根据相关性对网页进行公平准确的排序。一个高质量的搜索引擎要实现这3件事都不容易，但是呢，搜索引擎的基本原理还是相对简单的。我们平时使用的计算机可以处理复杂的逻辑计算，但其底层采用的是最简单的二进制计数方法，它只有两个数字：0和1。二进制除了是一种计数方法外，它还可以表示逻辑的 “是” 与 “非”，这个特征在搜索引擎的索引中非常有用。布尔运算是针对二进制的，它很简单，可能没有比布尔运算更简单的运算了。搜索引擎的实现，从根本上就离不开布尔运算的框架。&lt;/p&gt;
    
    </summary>
    
    
      <category term="架构" scheme="http://yoursite.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>接口隔离原则</title>
    <link href="http://yoursite.com/2019/05/17/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/05/17/接口隔离原则/</id>
    <published>2019-05-17T01:10:10.000Z</published>
    <updated>2019-05-17T12:50:15.065Z</updated>
    
    <content type="html"><![CDATA[<p>接口隔离原则（Interface Segregation Principle，ISP）。ISP定义：<br><strong>客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。</strong></p><a id="more"></a> <h3 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h3><p>直观认识ISP原则，直接上图：<br><br></p><center><img src="/images/architecture/interface_segregation_principle/interface_segregation_principle_1.png"></center><p>在图中所描述的应用中，有多个用户需要操作Ops类。现在，我们假设User1类只需要使用op1，User2类只需要使用op2，User3类只需要使用op3。</p><p>在这种情况下，如果使用Java语言来实现，User1并不需要调用op2、op3方法，但是在代码层次上且与Ops类形成了依赖。这种依赖意味着我们对Ops类的op2方法所做的任何修改，即使不会影响User1的功能，也会导致Ops需要被重新编译和部署。</p><p>这个问题可以通过将不同的操作隔离成接口来解决，如下图：<br><br></p><center><img src="/images/architecture/interface_segregation_principle/interface_segregation_principle_2.png"></center><p>同样，如果使用Java语言来实现，那么User1类会依赖于U1Ops接口，且U1Ops接口只有op1方法，但是User1类不会依赖Ops类，Ops类只需要负责实现U1Ops接口的方法即可。这样一来，我们之后对Ops类做的修改只要不影响到User1的功能，就不需要重新编译和部署User1了。</p><h3 id="ISP于编程语言"><a href="#ISP于编程语言" class="headerlink" title="ISP于编程语言"></a>ISP于编程语言</h3><p>我们知道，一个算法、一个设计思路是跟具体的编程语言无关的。上面的例子很大程度上依赖于编程语言的一个特性，那就是导入需要的依赖代码，如Java语言的import，C语言的include等。而正是这些语句带来了代码之间的依赖关系，这也导致了某些模块需要被重新编译和重新部署。</p><p>对于Python和Ruby这样的动态语言来说，它们属于解释性语言，它们所依赖的代码会在运行时被推演出来，所以也就不存在重新编译和重新部署的必要性。这也是动态语言比静态语言更灵活、耦合度更松的原因。</p><p>当然，如果是这样的话，我们可能会误以为ISP只是一个与特定编程语言相关的设计原则，而非软件架构的设计原则，这就错了。</p><h3 id="ISP于软件架构"><a href="#ISP于软件架构" class="headerlink" title="ISP于软件架构"></a>ISP于软件架构</h3><p>在一般情况下，任何层次的软件设计如果依赖于不需要的东西，都会是有害的。从代码层次来说，这样的依赖会导致不必要的重新编译和重新部署，从软件架构层次来说，问题也是类似的。</p><p>例如，我们在设计系统S（System）时，想要在系统中引入某个框架F（Framework），并假设框架F又绑定在一个特定的数据库D（DB）上，这样就形成了S依赖于F，F依赖于D的关系。如图：<br><br></p><center><img src="/images/architecture/interface_segregation_principle/interface_segregation_principle_3.png"></center><p>在这种情况下，如果D中包含了F不需要的功能，那么这些功能同样也会是S不需要的。而我们对D中这些功能的修改将会导致F需要被重新部署，后者又会导致S的重新部署。更糟糕的是，D中一个无关功能的错误也可能会导致F和S运行出错。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ISP设计原则告诉我们：任何层次（代码和架构）的软件设计如果依赖了它并不需要的东西，就会带来意料之外的麻烦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接口隔离原则（Interface Segregation Principle，ISP）。ISP定义：&lt;br&gt;&lt;strong&gt;客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="架构" scheme="http://yoursite.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>里氏替换原则</title>
    <link href="http://yoursite.com/2019/05/09/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/05/09/里氏替换原则/</id>
    <published>2019-05-09T01:10:10.000Z</published>
    <updated>2019-05-17T12:49:45.759Z</updated>
    
    <content type="html"><![CDATA[<p>里氏替换原则（Liskov Substitution Principle，LSP）是面向对象设计的基本原则之一。 里氏替换原则认为：<br><strong>任何基类（父类或接口）可以出现的地方，子类（实现类）一定可以出现。 LSP是继承复用的基石，只有当子类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而子类也能够在基类的基础上增加新的行为</strong></p><a id="more"></a> <p>为了更好理解这个原则，我们举两个例子（一个违反原则案例、一个符合原则案例）。</p><h3 id="违反原则案例：长方形和正方形"><a href="#违反原则案例：长方形和正方形" class="headerlink" title="违反原则案例：长方形和正方形"></a>违反原则案例：长方形和正方形</h3><p>从长方形和正方形的特性中，我们知道正方形也是一种特殊的长方形。现在有一个需求是通过指定长方形（或正方形）的长和宽，求得该长方形的面积。由于正方形是一种特殊的长方形，开发者设计时把长方形作为父类，正方形作为子类并继承父类，如下图：<br><br></p><center><img src="/images/architecture/liskov_substitution_principle/liskov_substitution_principle_1.png"></center><p>在这个案例中，Square类不应该是Rectangle类的子类，因为Rectangle类的高和宽可以分别修改，而Square类的高和宽则必须一同修改。由于User类直接对接和操作Rectangle类，因此会带来一些混淆。如下代码：</p><pre><code>Rectangle r = ...;r.setH(2);r.setW(5);assert(r.area() == 10);</code></pre><p>如果变量 r 指向的是Rectangle类对象，此断言是成立的，但是如果变量 r 指向的是Square类对象，则这个断言结果是不成立的。</p><p>想要避免这种违反LSP的行为，有一个方法是在User类中增加用于区分Rectangle和Square的检测逻辑（例如增加 if 判断逻辑）。但是这样一来，User类的行为又将依赖于它所使用的类，这两个类就不能互相替换了。</p><h3 id="符合原则案例：排序算法"><a href="#符合原则案例：排序算法" class="headerlink" title="符合原则案例：排序算法"></a>符合原则案例：排序算法</h3><p>假设现在有一个需求，要求对一组集合的数据进行排序。我们定义了一个Sort&lt;I&gt;接口，该接口有一个sort()排序方法，最开始我们使用了冒泡排序，所以定义了一个Sort接口的实现类BubbleSort。</p><p>集合数据比较少时，冒泡排序的处理速度还可以接受，但是随着集合数据的增加，冒泡排序的处理效率下降越明显。之后，我们打算使用快速排序替换掉冒泡排序，所以增加了一个排序实现类QuickSort，而User类直接操作的是Sort接口，因此User类不用做任何修改。如下图：<br><br></p><center><img src="/images/architecture/liskov_substitution_principle/liskov_substitution_principle_2.png"></center><p>上述设计是符合LSP原则的，因为User类的行为并不依赖于Sort接口的任何一个实现类。如果由于需求需要，要使用堆排序替换掉快速排序，只需要增加一个排序实现类HeapSort即可。也就是说，这3个子类（实现类）的对象都是可以用来替换Sort基类（接口）对象的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>LSP是一种更广泛的、指导接口与其实现方式的设计原则。这里提到的接口可以有多种形式——可以是Java风格的接口，具有多个实现类；也可以像C++一样，父类指针指向子类对象；甚至可以是一个REST接口，多个服务程序只要遵循该REST的规范并响应同一个REST接口。</p><p>LSP应该被应用于软件架构层面，因为一旦违背了可替换性，该系统架构就不得不为此添加大量复杂的应对机制。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;里氏替换原则（Liskov Substitution Principle，LSP）是面向对象设计的基本原则之一。 里氏替换原则认为：&lt;br&gt;&lt;strong&gt;任何基类（父类或接口）可以出现的地方，子类（实现类）一定可以出现。 LSP是继承复用的基石，只有当子类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而子类也能够在基类的基础上增加新的行为&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="架构" scheme="http://yoursite.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>开闭原则</title>
    <link href="http://yoursite.com/2019/05/06/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/05/06/开闭原则/</id>
    <published>2019-05-06T01:10:10.000Z</published>
    <updated>2019-05-17T12:49:16.151Z</updated>
    
    <content type="html"><![CDATA[<p>开闭原则(Open Closed Principle, OCP)是Bertrand Meyer在1988年提出的，该设计原则认为：</p><p><strong>一个设计良好的计算机系统应该易于扩展（对扩展开放），同时抗拒修改（对修改关闭）。</strong></p><p>其实这也是我们设计软件架构的根本目的。如果对于小小的需求改动，而需要大幅度地修改整个软件架构，这种牵一发而动全身的设计显然是要避免的。下面，我们通过一个案例来对开闭原则做一些说明。</p><a id="more"></a> <h3 id="案例：-电商交易日志系统"><a href="#案例：-电商交易日志系统" class="headerlink" title="案例： 电商交易日志系统"></a>案例： 电商交易日志系统</h3><p>假设我们要设计一个电商交易日志系统，用于记录用户的交易行为记录。如：用户在某个电商平台购买商品，购买商品经过了以下步骤或页面操作，浏览商品目录 -&gt; 查看商品详情 -&gt; 加入购物车 -&gt; 提交订单 -&gt; 填写收货信息 -&gt; 支付等。该交易日志系统以日志的方式记录了用户购物的操作步骤，从而可以分析出某个用户购买行为存在的问题，这样就可以优化和调整购物操作流程，提高用户购物的转化率。</p><p>最开始用户量较少，存储方式也比较简单，选择了使用Mysql作为存储日志的数据库。用户的每次操作，都写入一笔记录到Mysql，然后使用SQL语句来分析用户购买行为。系统架构如下：<br><br></p><center><img src="/images/architecture/open_closed_principle/open_closed_principle_1.png"></center><p>为了方面演示，这里只给出了两个重要组件：业务服务组件（电商业务逻辑处理组件）、日志记录组件（日志存储和分析组件），使用的是Mysql数据库。业务服务组件使用到了日志的存储和分析等操作，所以这里的业务服务组件依赖于日志记录组件。</p><p>随着电商系统的用户量的增加，日志量也会大幅度增加，使用Mysql存储和分析日志的瓶颈也越来越明显。传统的关系型数据库在横向扩展和大数据量处理方面比较吃力，为了解决这个问题，开发部门决定使用Hadoop来作为日志的存储和分析。</p><p>但是，由于之前的架构设计导致业务服务组件依赖于日志记录组件，要把Mysql替换为Hadoop的话，也需要修改业务服务组件代码。业务服务组件作为最核心的组件，现在为了修改日志记录组件而受到影响，这是开发者最不愿遇到的情况，最核心的组件应该是最稳定的和抗拒修改的。</p><p>为了避免核心组件受到不必要的影响，这里我们用到一个设计原则：如果A组件不想被B组件上发生的修改所影响，那么就应该让B组件依赖于A组件。修改后的架构如下：<br><br></p><center><img src="/images/architecture/open_closed_principle/open_closed_principle_2.png"></center><p>所以现在的情况是，日志记录组件依赖于业务服务组件，在业务服务组件内部，使用接口的方式抽象出日志存储和分析的操作，日志记录组件负责实现这些接口即可。这样，以后就算还要使用其它方式的日志记录组件，只要实现业务服务组件定义的日志记录接口，而业务服务组件不需做修改。</p><p>以上就算我们在软件架构层次上对OCP这一设计原则的应用。开发者可以根据相关函数被修改的原因、修改的方式以及修改的时间来对其进行分组隔离，并将这些互相隔离的函数分组整理成组件结构，使得高阶组件（核心组件）不会因为低阶组件（辅助组件）被修改而受到影响。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>OCP是我们进行系统架构设计的主导原则，其主要目标是让系统易于扩展，同时限制其每次被修改所影响的范围。实现方式是通过将系统划分为一系列组件，并将这些组件间的依赖关系按层次结构进行组织，使得高阶组件不会因低阶组件被修改而受到影响。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开闭原则(Open Closed Principle, OCP)是Bertrand Meyer在1988年提出的，该设计原则认为：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个设计良好的计算机系统应该易于扩展（对扩展开放），同时抗拒修改（对修改关闭）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实这也是我们设计软件架构的根本目的。如果对于小小的需求改动，而需要大幅度地修改整个软件架构，这种牵一发而动全身的设计显然是要避免的。下面，我们通过一个案例来对开闭原则做一些说明。&lt;/p&gt;
    
    </summary>
    
    
      <category term="架构" scheme="http://yoursite.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>单一职责原则</title>
    <link href="http://yoursite.com/2019/04/15/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/04/15/单一职责原则/</id>
    <published>2019-04-15T01:10:10.000Z</published>
    <updated>2019-05-17T12:48:38.431Z</updated>
    
    <content type="html"><![CDATA[<p>单一职责原则(Single Pesponsibility Principle, SRP)是SOLID五大设计原则最容易被误解的一个。也许是名字的原因，很多程序员根据SRP这个名字想当然地认为这个原则是指：每个模块应该只做一件事。但这只是一个面向底层实现细节的设计原则，并不是SRP的全部。对于SRP的描述是：</p><p><strong>任何一个软件模块都应该只对某一类行为者负责。</strong></p><a id="more"></a> <p>大部分情况下，对于 “软件模块” 的简单定义就是一个源代码文件（如.java文件和.py文件等），也可以指一组紧密相关的函数和数据结构。对于 “行为者” 可以是该模块的用户和利益相关者，只要是这些人对系统进行的变更是相似的，都可以归为同一类行为者。如何去理解SRP这一原则，下面通过两个反面案例来详细说明。</p><h3 id="反面案例1：重复的假象"><a href="#反面案例1：重复的假象" class="headerlink" title="反面案例1：重复的假象"></a>反面案例1：重复的假象</h3><p>有一个员工管理模块Employee类，Employee类有三个函数：calculatePay()，reportHours()和save()。如图：</p><center><img src="/images/architecture/single_pesponsibility_principle/single_pesponsibility_principle_1.png"></center><p>这三个函数分别对应的是三类不同的行为者，违反了SRP设计原则。</p><ul><li>calculatePay()是计算工资函数：由财务部门制定，负责向CFO（首席财务官）汇报。</li><li>reportHours()是日常运营报告函数：由人力资源部门制定，负责向COO（首席营运官）汇报。</li><li>save()是持久化数据函数：由DBA制定，负责向CTO（首席技术官）汇报。</li></ul><p>这三个函数被放在同一个源文件中，即同一个Employee类中，这样做实际上就等于使三类行为者的行为耦合在了一起，这有可能会导致CFO团队的需求变更影响到COO团队所依赖的功能。例如，calculatePay()函数和reportHours()函数使用了同样逻辑来计算员工的工时情况。开发者为了避免重复代码，通常会将该算法单独实现为一个名为regularHours()的函数。</p><p>那么，假设CFO团队需要修改工时的计算方法，而COO团队不需要这个修改，因为他们对工时的计算方法可能存在差异。这时，负责修改代码的开发者会注意到calculatePay()函数调用了regularHours()函数，当可能不会注意到该函数同时被reportHours()函数调用。</p><p>于是，该开发者就这样按照需求修改了工时的计算方法，同时CFO团队也验证了新算法可以正常工作。这项修改最终被成功部署上线了。但是，COO团队显然不知道这些变更事情的发生，在他们继续使用regularHours()产生报表时，随后就会发现数据错误的结果。</p><p>这类问题发生的根源就是因为我们将不同行为者所依赖的代码强凑合到了一起，对此，SRP强调这类代码一定要分开。</p><h3 id="反面案例2：代码合并"><a href="#反面案例2：代码合并" class="headerlink" title="反面案例2：代码合并"></a>反面案例2：代码合并</h3><p>一个拥有很多函数的源代码文件必然会经历很多次代码合并，如果这些函数分别服务于不同的行为者，会给代码合并带来很多问题（如代码冲突、功能影响），虽然有svn和git代码托管工具，但是合并带来的问题还是不能得到有效解决。</p><p>例如，CTO团体的DBA决定要对Employee数据库表结构进行修改，与此同时，COO团队的HR需要修改员工工时报表的格式。这样，就很可能出现来自不同团队的开发者分别对Employee类进行修改的情况，导致各自的修改互相冲突，这就必须要进行代码合并。该例子中，这次代码合并不仅有可能让CTO和COO各自要求的功能出错，甚至连CFO原本正常的功能也可能受到影响。</p><p>这样的案例有很多，它们的一个共同点是，多人为了不同的目的修改了同一份源代码，这很容易造成问题的产生，而避免这种问题产生的方法就是将服务不同行为者的代码进行切分。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>我们有很多方法可以解决上面例子中的问题，每一种方法都需要将相关的函数划分成不同的类。</p><p><strong>1. 方法一</strong> </p><p>最简单直接的方法是将数据和函数分离。设计三个函数类共同使用一个数据类EmployeeData，每个函数类只包含与之行为者相关函数代码，这样就不存在互相依赖的情况了。如图：<br><br></p><center><img src="/images/architecture/single_pesponsibility_principle/single_pesponsibility_principle_2.png"></center><p>这种方案的缺点在于：开发者需要在程序里处理三个函数类。</p><p><strong>1. 方法二</strong> </p><p>在方法一的基础上，使用Facade设计模式（外观设计模式），把三个函数类中需要对外使用到的函数合并到一个Facade类中。如图：<br><br></p><center><img src="/images/architecture/single_pesponsibility_principle/single_pesponsibility_principle_3.png"></center><p>Facade设计模式的好处是：EmployeeFacade类的代码量较少，它仅仅包含了初始化和调用三个具体实现类的函数。</p><p>当然，也有些开发者更倾向于把最重要的业务逻辑和数据放在一起。对于上面例子，我们可以选择将最重要的函数保留在Employee类中，同时用这个类来调用其它没那么重要的函数。如图：<br><br></p><center><img src="/images/architecture/single_pesponsibility_principle/single_pesponsibility_principle_4.png"></center><p>为了清晰的了解这些解决方案，每个函数类中都只有一个函数，事实上并非如此，因为计算工资、生成报表和持久化数据都比较复杂的过程，每个函数类都可能包含了许多私有函数。总而言之，上面的每一个类都分别容纳了一组作用于相同作用域的函数，且每个作用域各自的私有函数是互相不可见的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>单一职责原则主要讨论的是函数和类之间的关系——但是该原则在两个不同层面上会以不同的形式出现。在组件层面，可以将其称为共同闭包原则（Common Closure Principle），在软件架构层面，它是用于奠定架构边界的变更轴心（Axis of Change）。这两个原则会在后续的文章中深入讨论。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单一职责原则(Single Pesponsibility Principle, SRP)是SOLID五大设计原则最容易被误解的一个。也许是名字的原因，很多程序员根据SRP这个名字想当然地认为这个原则是指：每个模块应该只做一件事。但这只是一个面向底层实现细节的设计原则，并不是SRP的全部。对于SRP的描述是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;任何一个软件模块都应该只对某一类行为者负责。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="架构" scheme="http://yoursite.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>分而治之</title>
    <link href="http://yoursite.com/2019/03/30/%E5%88%86%E8%80%8C%E6%B2%BB%E4%B9%8B/"/>
    <id>http://yoursite.com/2019/03/30/分而治之/</id>
    <published>2019-03-30T01:10:10.000Z</published>
    <updated>2019-05-17T12:47:58.386Z</updated>
    
    <content type="html"><![CDATA[<p>生活中经常看到跟排序相关的例子，如：微博中排名前10的热点话题，学校中考试平均成绩排名前3的班级，NBA中比赛胜率排名前8的球队等。排序可以让重点数据凸显出来，从而更容易得到关注。开发中，我们也常遇到排序的问题，如对一个集合a(1),a(2),a(3),…,a(N)进行排序，然后取出前10个最大值。<a id="more"></a> 如果集合比较小，可以编写一段排序程序，并且在一台计算机上就可以快速执行完成。如果集合比较大（比如几十亿或几百亿个元素），这对一台计算机来说是非常吃力的，甚至无法完成计算。有一个比较好的方案是使用分治算法，先把一个大集合拆分为几个小集合，如一分为二，变为a(1),a(2),…,a(N/2)和a(N/2+1),a(N/2+2),…,a(N)，然后对每一半分别进行排序，并取出每一半集合中前10个最大值，最后一步是合并结果，把每一半集合前10个最大值合并到一个集合中（20个元素），之后对这个集合进行最后一次排序，取出最大的前10个值，这10个值就是整个大集合中排名前10的最大值。</p><p>上面例子使用到了分治的思路，从数据量、计算能力、内存容量、磁盘容量等维度上得到了扩展，把大数据进行拆分，充分使用多台计算机的计算能力和存储能力，这也是Google发明MapReduce程序的思路。</p><p>在架构设计中，分治思路同样可以发挥重要作用。分治可以理解为拆分，可以拆分数据库、拆分服务、拆分机器资源等，拆分的作用是可以使软件架构更易于扩展，以适应业务需求的快速变化（如用户量增长、请求量增长）。下面从三个方面来讲诉如何有效的扩展系统规模，以满足急剧膨胀的快速功能扩展和价值创造的需求。这三个方面用XYZ轴来表示，如图：</p><center><img src="/images/architecture/divide_and_rule/divide_and_rule.png"></center><h3 id="X轴拆分"><a href="#X轴拆分" class="headerlink" title="X轴拆分"></a>X轴拆分</h3><ul><li><p><strong>内容</strong>：通常叫水平扩展，通过复制服务或数据库以分散事务处理带来的负载。</p></li><li><p><strong>场景</strong>：</p><pre><code>1.数据库读写比例很高（可以达到5:1甚至更高）。2.事务增长超过数据增长的系统。</code></pre></li><li><p><strong>用法</strong>：</p><pre><code>1.复制服务，同时配置负载均衡器。2.确保使用数据库的程序清楚读和写的区别。</code></pre></li><li><p><strong>原因</strong>：以复制数据和功能为代价获得事务的快速扩展。</p></li><li><p><strong>要点</strong>：X轴拆分实施速度快、研发成本低，事务处理扩展效果好。然而，从运维角度来看，数据的运营成本比较高。</p></li></ul><p>在应用系统开发中，关系型数据库是很多开发者选择的存储方式，在扩展问题的解决方案中最困难的部分经常是数据库或持久存储层。OLTP系统中大多数表都遵循为第三范式，数据库表的每一列都是不可分割的原子数据项，非关键字段完全依赖于主键，任何非关键字段不依赖于其它非关键字段。因为ACID（原子性、一致性、隔离性、持久性）属性，许多应用依靠数据库来支持和强制这些关系，导致这种数据库很难被拆分。</p><p>数据库扩展的一个技巧是利用大多数应用对数据库的读操作远远多于写操作。这种类型的系统可以通过复制只读数据的办法实现扩展。根据数据对时间的敏感性（数据必须是即时、实时、同步和完全正确的，这是理想状态，但是要实现这种系统的成本是昂贵的，因此，基于成本和实现复杂度的考虑，并不是所有的数据都必须是实时同步的），我们有几种不同的方法来分散只读数据。</p><p>一种方法是在数据库的前面加缓冲层。让读操作直接从缓冲层读取数据，而不用反复查询数据库。当读取的数据在缓存层不存在或已过期时，才触发查询数据库的操作，并更新最近查询的数据到缓冲层。这种方案目前有很多开源组件可以实现（如redis、memcache等），对频繁读操作的性能有显著提升。</p><p>还有一种方法是数据库复制。许多数据库通过主从方式来实现复制，主数据库是负责写入的主要事务型数据库，而从数据库是主数据库的只读副本。主数据库不断的跟踪数据的更新、插入、删除，并把记录存入一个二进制日志。从数据库从主数据库获取二进制日志后，在从数据库上重新执行这些命令。这是一个异步的过程，数据之间的时间延迟，取决于主数据库更新、插入、删除的数据量。该方案经常结合负载均衡器来实现，应用程序向负载均衡器发起读取请求，负载均衡器以轮询或者最少连接数的策略把请求传递给从数据库。目前数据库复制有两种常用方式，一种是以主主的概念进行复制，其中任意数据库都可以用来读和写，但是更建议使用另外一种方式，就是分离读和写数据库（也就是上面的方式，一个写数据库，多个读数据库），这样有助于消除混淆和避免数据库之间的逻辑争用。</p><p>我们把这种拆分称为X轴拆分（水平复制）。X轴拆分不仅可以应用于数据库，在可以应用在网络服务器和应用服务器的扩展中。这种水平复制的方式允许事务在系统之间均匀地分布以实现水平扩展，但是局限性也很明显，随着流量和数据的增大，业务越来越复杂，单纯的X轴拆分很快遇到性能瓶颈（内存、存储等资源的约束）。为了解决这些问题，我们需要引入Y轴和X轴扩展。</p><h3 id="Y轴拆分"><a href="#Y轴拆分" class="headerlink" title="Y轴拆分"></a>Y轴拆分</h3><ul><li><p><strong>内容</strong>：Y轴扩展也称为功能（服务）或数据（资源）扩展。</p></li><li><p><strong>场景</strong>：</p><pre><code>1.数据之间的关联关系不是那么强的大型数据集。2.需要拆分资源的大型复杂系统。</code></pre></li><li><p><strong>用法</strong>：</p><pre><code>1.结合拆分功能（服务）和拆分数据（资源）。2.沿着服务和资源定义的边界来拆分功能和数据。</code></pre></li><li><p><strong>原因</strong>：不仅允许应用事务和大型数据集有效扩展，也支持团队的有效扩展。</p></li><li><p><strong>要点</strong>：Y轴扩展有益于故障隔离，也减低团队之间的沟通成本。</p></li></ul><p>简单的说，Y轴拆分是通过在系统内部拆分不同的功能和数据从而实现扩展的方法。</p><p>首先，我们先通过功能（或服务）来拆分。拿电商系统来说，电商系统由登录、商品搜索、购物车、订单等功能模块组成。当分析登录和商品搜索这样迥然不同的功能时，这两种功能的边界划分和差异性比较明显，使得这种扩展方法更有效的实现。在登录的情况下，我们主要关注的是用户验证凭据和会话状态，因此需要缓存和该用户有关的交互数据。商品搜索关注的是寻找一个商品，关心的是用户的意图和商品。拆分这两类数据后，每类数据有属于各自的缓冲层和数据库持久层，将使我们能够在每个功能中投入更多的系统资源（如：cpu、内存、磁盘等），更充分地利用系统资源促使这两个功能模块有更快的响应速度。</p><p>其次，我们通过数据来拆分。继续电商系统为例，假设电商系统是由产品目录、产品库存、用户账户信息和营销信息等组成。我们可以根据数据按类型拆分，然后抽象出数据操作的接口，如创建、查询、更新、删除。</p><p>Y轴拆分对功能和数据的扩展最有价值，但同时对团队的扩展也很有用途。随着功能和数据的拆分，实现功能和操作数据的代码也会被拆分，这意味着技术团队也会被拆分为不同子团队，每个子团队只负责实现各自的功能模块，并在服务中建立和维护各自的接口（或API）。正因为拆分了功能和数据，应用系统才容易扩展事务。</p><h3 id="Z轴拆分"><a href="#Z轴拆分" class="headerlink" title="Z轴拆分"></a>Z轴拆分</h3><ul><li><strong>内容</strong>：根据数据独特的属性（例如ID、地理位置、时间范围等）拆分。</li><li><strong>场景</strong>：适用于非常大而且类似的数据集，如庞大的客户群、机器日志等。</li><li><strong>用法</strong>：根据数据的属性对数据集进行分片（或分区）存储。</li><li><strong>原因</strong>：快速增长的数据集，分片后有利于快速查询和故障隔离。</li><li><strong>要点</strong>：Z轴拆分对于扩大数据基数的效果明显，非常适用于大型数据集上。</li></ul><p>Z轴拆分通常被称为分片，是把一个数据集或一个服务分割成几块。一般情况下，这些块的大小比较平均，但也可能存在这些块大小不一，块之间大小差异比较大。生活中我们已经使用到了分片的思维，假如我们要把一堆书按照分类（文学、科技、数学等类别）分别装到不同的箱子中，并在每个箱子上贴上分类标签，这样，当我们要找一本 “红楼梦” 时，直接到贴有 “文学” 标签的箱子里找即可，而无需遍历所有的箱子，节省了寻找时间。</p><p>分片是根据数据的属性来拆分的，如：在电商系统中可以根据用户的地理位置对用户信息进行分片，在日志管理系统中可以根据日志产生日期对日志数据进行分片，如果数据没有明显的属性，可以对数据的ID取模或散列算法来产生分片。分片的最大用处是能够有效的分散数据集，提高数据查询响应速度。如果没有对数据分片，要查找一个数据时需要遍历一整个数据集而变得异常缓慢。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通常X轴扩展的成本最低，Y和Z轴的扩展方案相对复杂，但是更具有灵活性。结合这三种扩展方法，在大多数系统扩展时都会得到很好的效果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生活中经常看到跟排序相关的例子，如：微博中排名前10的热点话题，学校中考试平均成绩排名前3的班级，NBA中比赛胜率排名前8的球队等。排序可以让重点数据凸显出来，从而更容易得到关注。开发中，我们也常遇到排序的问题，如对一个集合a(1),a(2),a(3),…,a(N)进行排序，然后取出前10个最大值。&lt;/p&gt;
    
    </summary>
    
    
      <category term="架构" scheme="http://yoursite.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>线性回归</title>
    <link href="http://yoursite.com/2018/10/28/%E5%9B%9E%E5%BD%92-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>http://yoursite.com/2018/10/28/回归-线性回归/</id>
    <published>2018-10-28T01:10:10.000Z</published>
    <updated>2018-10-28T02:49:33.354Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><hr><p>线性回归是利用被称为线性回归方程的最小平方函数对一个或多个自变量和因变量之间关系建模的一个回归分析，且自变量和因变量的关系可用一条直线近似表示。</p><ul><li>一元线性回归<br>  只包含一个自变量和一个因变量</li><li>多元线性回归<br>  两个或两个以上的自变量和一个因变量<a id="more"></a> </li></ul><h4 id="例子-房价预测"><a href="#例子-房价预测" class="headerlink" title="例子-房价预测"></a>例子-房价预测</h4><hr><p>如果房价只受房屋面积的影响，那么房价和房屋面积的关系可以使用一条直线来近似表示：<br><img src="/images/machine-learning/linearRegression/1.png"></p><p>为了表示多元线性情况，现在增加一个影响房价的因素：房间数。如下表：</p><table><thead><tr><th>房屋面积</th><th>房间数</th><th>价格</th></tr></thead><tbody><tr><td>2104</td><td>3</td><td>400</td></tr><tr><td>1600</td><td>3</td><td>330</td></tr><tr><td>2400</td><td>3</td><td>369</td></tr><tr><td>1416</td><td>2</td><td>232</td></tr><tr><td>3000</td><td>4</td><td>540</td></tr><tr><td>2000</td><td>3</td><td>420</td></tr><tr><td>1500</td><td>2</td><td>300</td></tr><tr><td>2900</td><td>3</td><td>560</td></tr><tr><td>1700</td><td>2</td><td>350</td></tr><tr><td>2900</td><td>4</td><td>510</td></tr></tbody></table><p>自变量：房屋面积、房间数<br>因变量：价格<br>可以使用二元线性方程来表示：</p><center><img src="/images/machine-learning/linearRegression/2.png"></center><h4 id="线性方程-公式"><a href="#线性方程-公式" class="headerlink" title="线性方程-公式"></a>线性方程-公式</h4><hr><ul><li><p>线性方程公式</p><center><img src="/images/machine-learning/linearRegression/3.png"></center></li><li><p>如果上述例子添加了一个自变量：房间数，线性方程公式：</p><center><img src="/images/machine-learning/linearRegression/4.png"></center></li><li><p>因此一元或多元线性方程，统一写成如下格式（x0=1）</p><center><img src="/images/machine-learning/linearRegression/5.png"></center></li><li><p>这样求线性方程则演变成了求方程的参数θ</p></li></ul><h4 id="线性方程-评估"><a href="#线性方程-评估" class="headerlink" title="线性方程-评估"></a>线性方程-评估</h4><hr><ul><li><p><strong>评估</strong>：对于θ参数的求解，我们需要一个机制去评估θ是否最优，所以需要对做出的h函数进行评估。</p></li><li><p><strong>损失函数</strong>：用于评估h函数的好坏，一般称为损失函数。</p></li></ul><p>使用最小二乘法构建损失函数，损失函数如下：</p><center><img src="/images/machine-learning/linearRegression/6.png">损失函数描述的是预测值和真实值之差的平方和的平均值，也就是误差大小（1/2系数为了求导使得系数为1）。</center><h4 id="线性方程-梯度下降"><a href="#线性方程-梯度下降" class="headerlink" title="线性方程-梯度下降"></a>线性方程-梯度下降</h4><hr><ul><li><p>如何调整θ使得J(θ)取值最小有很多方法，这里介绍<strong>梯度下降法</strong>。</p></li><li><p>由之前所述，求θT的问题演变成了求J(θ)的极小值问题。而梯度下降法中的梯度方向由J(θ)对θ的偏导数确定，由于求的是极小值，因此梯度方向是偏导数的反方向， θ沿梯度下降变化值：</p><center><img src="/images/machine-learning/linearRegression/7.png">α为步长（学习速率），当α过大时，有可能越过最小值，而α当过小时，容易造成迭代次数较多，收敛速度较慢。  （因为梯度指的是增长最快的方向，而往下降是减少最快的方向）</center></li><li><p>α控制θ每次向J(θ)变小的方向迭代时的变化幅度。J(θ)对θ的偏导表示J(θ)变化最大的方向。假如数据集中只有一条样本，那么样本数量m为1，公式：</p><center><img src="/images/machine-learning/linearRegression/8.png">上述公式演变成：<img src="/images/machine-learning/linearRegression/9.png"></center></li><li><p>当样本数量m不为1时，将公式J(θ) 带入求偏导，那么每个参数沿梯度方向的变化值由公式求得：</p><center><img src="/images/machine-learning/linearRegression/10.png">初始时θT可设为0，然后迭代使用该公式计算θT中的每个参数，直至收敛为止。由于每次迭代计算θT时，都使用了整个样本集，因此我们称该梯度下降算法为批量梯度下降算法(batch gradient descent)。</center></li><li><p>当样本集数据量m很大时，批量梯度下降算法每迭代一次的复杂度为O(mn)，复杂度很高。因此，为了减少复杂度，当m很大时，我们更多时候使用<strong>随机梯度下降</strong>算法(stochastic gradient descent),算法如下所示：</p><center><img src="/images/machine-learning/linearRegression/11.png"></center></li><li><p>随机梯度下降在计算下降最快的方向时随机选一个数据进行计算，而不是扫描全部训练数据集，这样就加快了迭代速度。随机梯度下降并不是沿着J(θ)下降最快的方向收敛，而是震荡的方式趋向极小点。</p></li></ul><ul><li>注意，梯度下降可能得到局部最优，但在损失函数里已经证明线性回归只有一个最优点，因为损失函数J(θ)是一个二次的凸函数，不会产生局部最优的情况。（假设学习步长α不是特别大）</li></ul><h4 id="spark实现-房价预测"><a href="#spark实现-房价预测" class="headerlink" title="spark实现-房价预测"></a>spark实现-房价预测</h4><hr><ol><li>数据集格式： 价格,房屋面积 房间数</li><li>使用spark机器学习算法： LinearRegression，具体代码：</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> spark.ml.regression_analysis</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.SparkConf</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.ml.linalg.Vectors</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.ml.regression.LinearRegression</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.spark.sql.SparkSession</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">  * 线性回归--梯度下降算法</span></span><br><span class="line"><span class="hljs-comment">  */</span></span><br><span class="line">object LinearRegressionTest &#123;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function">def <span class="hljs-title">main</span><span class="hljs-params">(args: Array[String])</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//设置环境</span></span><br><span class="line">    System.setProperty(<span class="hljs-string">"hadoop.home.dir"</span>, <span class="hljs-string">"F:/java_lib/hadoop-2.6.0-cdh5.11.1"</span>)</span><br><span class="line">    val conf = <span class="hljs-keyword">new</span> SparkConf().setMaster(<span class="hljs-string">"local"</span>).setAppName(<span class="hljs-string">"LinearRegressionTest"</span>)</span><br><span class="line">    val spark = SparkSession</span><br><span class="line">      .builder()</span><br><span class="line">      .config(conf)</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    val sc = spark.sparkContext</span><br><span class="line">    <span class="hljs-keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//读取数据</span></span><br><span class="line">    val data = sc.textFile(<span class="hljs-string">"D:/spark_ml_data/lpsa.txt"</span>)</span><br><span class="line">      .map&#123; line =&gt; val</span><br><span class="line">        array = line.split(<span class="hljs-string">","</span>);</span><br><span class="line">        (array(<span class="hljs-number">0</span>).toDouble, Vectors.dense(array(<span class="hljs-number">1</span>).split(<span class="hljs-string">' '</span>).map(_.toDouble)))</span><br><span class="line">      &#125;.toDF(<span class="hljs-string">"label"</span>, <span class="hljs-string">"features"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//val sampleData = data.randomSplit(Array(0.7D, 0.3D), 11L) //数据随机分成两份</span></span><br><span class="line">    <span class="hljs-comment">//val train = sampleData(0)               //训练集</span></span><br><span class="line">    val train = data</span><br><span class="line">    <span class="hljs-comment">//val test = sampleData(1)                //测试集</span></span><br><span class="line">    val test = data</span><br><span class="line">    data.select(<span class="hljs-string">"features"</span>).show();         <span class="hljs-comment">//打印出特征</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//创建模型</span></span><br><span class="line">    val lr = <span class="hljs-keyword">new</span> LinearRegression()</span><br><span class="line">      .setMaxIter(<span class="hljs-number">20</span>)                       <span class="hljs-comment">//设置最大迭代次数</span></span><br><span class="line">      .setRegParam(<span class="hljs-number">0.3</span>)                     <span class="hljs-comment">//正则化参数</span></span><br><span class="line">      .setElasticNetParam(<span class="hljs-number">1</span>)                <span class="hljs-comment">//L1，L2混合正则化(aL1+(1-a)L2)</span></span><br><span class="line">    val lrModel = lr.fit(train)             <span class="hljs-comment">//开始训练</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// //输出模型相关参数</span></span><br><span class="line">    println(<span class="hljs-string">"Coefficients: "</span> + lrModel.coefficients + <span class="hljs-string">" Intercept: "</span> + lrModel.intercept);</span><br><span class="line">    val trainingSummary = lrModel.summary</span><br><span class="line">    println(<span class="hljs-string">"numIterations: "</span> + trainingSummary.totalIterations) <span class="hljs-comment">//执行迭代次数</span></span><br><span class="line">    println(<span class="hljs-string">"objectiveHistory: "</span> + Vectors.dense(trainingSummary.objectiveHistory)) <span class="hljs-comment">//每次迭代的(loss+regulation)</span></span><br><span class="line">    println(<span class="hljs-string">"RMSE: "</span> + trainingSummary.rootMeanSquaredError)   <span class="hljs-comment">//均方根误差</span></span><br><span class="line">    println(<span class="hljs-string">"r2: "</span> + trainingSummary.r2)   <span class="hljs-comment">//正则化参数</span></span><br><span class="line">    trainingSummary.residuals.show    <span class="hljs-comment">//训练集的预测值和实际值的差</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//预测测试数据</span></span><br><span class="line">    val prediction = lrModel.transform(test)</span><br><span class="line">    <span class="hljs-comment">//输出测试集的label和预测值</span></span><br><span class="line">    prediction.selectExpr(<span class="hljs-string">"label"</span>,<span class="hljs-string">"features"</span>,<span class="hljs-string">"prediction"</span>).show()</span><br><span class="line"></span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;线性回归是利用被称为线性回归方程的最小平方函数对一个或多个自变量和因变量之间关系建模的一个回归分析，且自变量和因变量的关系可用一条直线近似表示。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一元线性回归&lt;br&gt;  只包含一个自变量和一个因变量&lt;/li&gt;
&lt;li&gt;多元线性回归&lt;br&gt;  两个或两个以上的自变量和一个因变量&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="回归" scheme="http://yoursite.com/tags/%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>布隆过滤器</title>
    <link href="http://yoursite.com/2018/09/08/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://yoursite.com/2018/09/08/布隆过滤器/</id>
    <published>2018-09-08T10:10:10.000Z</published>
    <updated>2019-09-24T13:32:57.462Z</updated>
    
    <content type="html"><![CDATA[<h4 id="算法背景"><a href="#算法背景" class="headerlink" title="算法背景"></a>算法背景</h4><hr><p><strong>问题：</strong><br>在开发中，经常要判断一个元素是否在一个集合中。<br>**<br>实现方案：**<br>编程中通常使用集合来存储所有元素，然后通过hash值来确定元素是否存在。<br>如：java中的HashMap、HashSet等。<br><strong>优点：</strong>快速准确<br><strong>缺点：</strong>耗费存储空间</p><a id="more"></a> <p><strong>瓶颈：</strong><br>当集合比较小时，这个问题不明显<br>当集合比较大时，散列表存储效率低的问题越明显</p><p>如：判断邮件地址是否是发送垃圾邮件的地址<br>采用散列表：将每一个Email地址对应成一个8字节的信息指纹，然后存入散列表，由于散列表的存储效率一般只有50%，因此一个Email地址需要16个字节。一亿Email约1.6GB内存，存储几十亿个地址约上百GB的内存。</p><h4 id="布隆过滤器–概念"><a href="#布隆过滤器–概念" class="headerlink" title="布隆过滤器–概念"></a>布隆过滤器–概念</h4><hr><p>布隆过滤器（英语：Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询效率都远远超过一般的算法，缺点是有一定的误判率和删除困难。</p><h4 id="布隆过滤器—原理"><a href="#布隆过滤器—原理" class="headerlink" title="布隆过滤器—原理"></a>布隆过滤器—原理</h4><hr><p>布隆过滤器的原理是：<br>当一个元素被加入集合时，通过K个散列函数将这个元素映射成一个位数组中的K个点，把它们置为1。检索时，我们只要看看这些点是不是都是1就（大约）知道集合中有没有它了：如果这些点有任何一个0，则被检元素一定不在；如果都是1，则被检元素很可能在。这就是布隆过滤器的基本思想。</p><img src="/images/machine-learning/bloomfilter/00.jpg"><h4 id="布隆过滤器—缺点"><a href="#布隆过滤器—缺点" class="headerlink" title="布隆过滤器—缺点"></a>布隆过滤器—缺点</h4><hr><p>bloom filter之所以能做到在时间和空间上的效率比较高，是因为牺牲了判断的准确率、删除的便利性。<br><strong><em>存在误判</em></strong>。可能要查到的元素并没有在容器中，但是hash之后得到的k个位置上值都是1。如果bloom filter中存储的是黑名单，可以通过建立一个白名单来存储可能会误判的元素。<br><strong><em>删除困难</em></strong>。一个放入容器的元素映射到bit数组的k个位置上是1，删除的时候不能简单的直接置为0，可能会影响其它元素的判断。可以采用Counting Bloom Filter（计数布隆过滤器），将标准Bloom Filter位数组的每一位扩展为一个小的计数器（Counter）。</p><h4 id="布隆过滤器—实现"><a href="#布隆过滤器—实现" class="headerlink" title="布隆过滤器—实现"></a>布隆过滤器—实现</h4><hr><p>在使用bloom filter时，绕不过的两点：<br>1）预估数据量n<br>2）期望的误判率fpp</p><p>在实现bloom filter时，绕不过的两点：<br>1）hash函数的选取<br>2）bit数组的大小</p><p>对于一个确定的场景，我们预估要存的数据量为n，期望的误判率为fpp，然后需要计算我们需要的Bit数组的大小m，以及hash函数的个数k，并选择hash函数。</p><p>（1）Bit数组大小选择<br>   　　根据预估数据量n以及误判率fpp，bit数组大小的m的计算方式：<br><img src="/images/machine-learning/bloomfilter/01.png"><br>（2）哈希函数选择<br>   　　由预估数据量n以及bit数组长度m，可以得到一个hash函数的个数k：<br><img src="/images/machine-learning/bloomfilter/02.png"></p><p>哈希函数的选择对性能的影响是很大的，一个好的哈希函数要能近似等概率的将字符串映射到各个Bit。选择k个不同的哈希函数比较麻烦，一种简单的方法是选择一个哈希函数，然后送入k个不同的参数。<br><strong><em>下面使用java来实现布隆过滤器。</em></strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> com.blackhole.test.demo;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="hljs-keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="hljs-keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.BitSet;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Date;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 布隆过滤器</span></span><br><span class="line"><span class="hljs-comment"> * </span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BloomFilterDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">5221305273707291280L</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> dataCount; <span class="hljs-comment">// 预期数要存的数据量</span></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> falsePositive; <span class="hljs-comment">// 期望的误判率</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">private</span> BitSet bits; <span class="hljs-comment">// 位数组，使用BitSet实现</span></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> bitSize;<span class="hljs-comment">// 位数组大小</span></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> hashFunctionCount;<span class="hljs-comment">// 散列函数的个数</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BloomFilterDemo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> dataCount, <span class="hljs-keyword">double</span> falsePositive)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">super</span>();</span><br><span class="line"><span class="hljs-keyword">this</span>.dataCount = dataCount;</span><br><span class="line"><span class="hljs-keyword">this</span>.falsePositive = falsePositive;</span><br><span class="line"><span class="hljs-keyword">this</span>.init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 初始化</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.bitSize = (<span class="hljs-keyword">int</span>) <span class="hljs-keyword">this</span>.getNumOfBits(<span class="hljs-keyword">this</span>.dataCount, <span class="hljs-keyword">this</span>.falsePositive);</span><br><span class="line"><span class="hljs-keyword">this</span>.hashFunctionCount = <span class="hljs-keyword">this</span>.getNumOfHashFunctions(<span class="hljs-keyword">this</span>.dataCount, <span class="hljs-keyword">this</span>.bitSize);</span><br><span class="line"><span class="hljs-keyword">this</span>.bits = <span class="hljs-keyword">new</span> BitSet(<span class="hljs-keyword">this</span>.bitSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 往布隆过滤器添加数据标记</span></span><br><span class="line"><span class="hljs-comment"> * 如果不存在就进行记录并返回false，如果存在了就返回true</span></span><br><span class="line"><span class="hljs-comment"> * </span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> data</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> NoSuchAlgorithmException </span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(String data)</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span>[] indexs = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-keyword">this</span>.hashFunctionCount];</span><br><span class="line"><span class="hljs-comment">// 先假定存在</span></span><br><span class="line"><span class="hljs-keyword">boolean</span> exist = <span class="hljs-keyword">true</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> index;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.hashFunctionCount; i++) &#123;</span><br><span class="line">indexs[i] = index = hash(data, i);</span><br><span class="line"><span class="hljs-keyword">if</span> (exist) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.bits.get(index)) &#123;</span><br><span class="line"><span class="hljs-comment">// 只要有一个不存在，就可以认为整个字符串都是第一次出现的</span></span><br><span class="line">exist = <span class="hljs-keyword">false</span>;</span><br><span class="line"><span class="hljs-comment">// 补充之前的信息</span></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line"><span class="hljs-comment">//将对应的位设置为true</span></span><br><span class="line"><span class="hljs-keyword">this</span>.bits.set(indexs[j], <span class="hljs-keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">//将对应的位设置为true</span></span><br><span class="line"><span class="hljs-keyword">this</span>.bits.set(index, <span class="hljs-keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> exist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 检查数据是否存在</span></span><br><span class="line"><span class="hljs-comment"> * </span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> data</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> NoSuchAlgorithmException </span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">check</span><span class="hljs-params">(String data)</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.hashFunctionCount; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> index = hash(data, i);</span><br><span class="line"><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.bits.get(index)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * md5实现hash--目前测试，该hash算法的效果比较好</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> message</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> funNum</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> NoSuchAlgorithmException </span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(String message, <span class="hljs-keyword">int</span> funNum)</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException</span>&#123;</span><br><span class="line">MessageDigest md5 = MessageDigest.getInstance(<span class="hljs-string">"md5"</span>);</span><br><span class="line">        message  = message + String.valueOf(funNum);</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] bytes = message.getBytes();</span><br><span class="line">        md5.update(bytes);</span><br><span class="line">        BigInteger bi = <span class="hljs-keyword">new</span> BigInteger(md5.digest());</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> Math.abs(bi.intValue()) % <span class="hljs-keyword">this</span>.bitSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 获取Bit数组的大小</span></span><br><span class="line"><span class="hljs-comment"> * </span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> n</span></span><br><span class="line"><span class="hljs-comment"> *            预估要存的数据量</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> p</span></span><br><span class="line"><span class="hljs-comment"> *            期望的误判率</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getNumOfBits</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n, <span class="hljs-keyword">double</span> p)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (p == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">p = Double.MIN_VALUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// -1 * (n * log(p)) / (log(2) * log(2))</span></span><br><span class="line"><span class="hljs-keyword">return</span> (<span class="hljs-keyword">long</span>) (-n * Math.log(p) / (Math.log(<span class="hljs-number">2</span>) * Math.log(<span class="hljs-number">2</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 获取hash函数的数量</span></span><br><span class="line"><span class="hljs-comment"> * </span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> n</span></span><br><span class="line"><span class="hljs-comment"> *            预估要存的数据量</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> m</span></span><br><span class="line"><span class="hljs-comment"> *            Bit数组的大小m</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNumOfHashFunctions</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n, <span class="hljs-keyword">long</span> m)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">// (m / n) * log(2)</span></span><br><span class="line"><span class="hljs-keyword">return</span> Math.max(<span class="hljs-number">1</span>, (<span class="hljs-keyword">int</span>) Math.round((<span class="hljs-keyword">double</span>) m / n * Math.log(<span class="hljs-number">2</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 持久化布隆过滤器对象</span></span><br><span class="line"><span class="hljs-comment"> * </span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> path</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveFilterToFile</span><span class="hljs-params">(String path)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">try</span> (ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(path))) &#123;</span><br><span class="line">oos.writeObject(<span class="hljs-keyword">this</span>);</span><br><span class="line">&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 读取布隆过滤器对象</span></span><br><span class="line"><span class="hljs-comment"> * </span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> path</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BloomFilterDemo <span class="hljs-title">readFilterFromFile</span><span class="hljs-params">(String path)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">try</span> (ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(path))) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> (BloomFilterDemo) ois.readObject();</span><br><span class="line">&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">String file = <span class="hljs-string">"d:\\bloomFilter.obj"</span>;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">createFilter(file);</span><br><span class="line">readFilter(file);</span><br><span class="line">&#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createFilter</span><span class="hljs-params">(String file)</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> count = <span class="hljs-number">1000</span> * <span class="hljs-number">10000</span>;</span><br><span class="line"><span class="hljs-keyword">double</span> fpp = <span class="hljs-number">0.00001</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="hljs-string">"start --- "</span> + <span class="hljs-keyword">new</span> Date());</span><br><span class="line">BloomFilterDemo bloomFilter = <span class="hljs-keyword">new</span> BloomFilterDemo(count, fpp);</span><br><span class="line"><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span> (i &lt; count) &#123;</span><br><span class="line">String msg = <span class="hljs-string">"时间：2018-10-01 10:00:00， 源IP：10.1.1.12，目标IP：192.1.1.205， 攻击类型：ddos攻击 -- "</span> + i; </span><br><span class="line">bloomFilter.add(msg);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">bloomFilter.saveFilterToFile(file);</span><br><span class="line">System.out.println(<span class="hljs-string">"end --- "</span> + <span class="hljs-keyword">new</span> Date());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readFilter</span><span class="hljs-params">(String file)</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line">BloomFilterDemo bloomFilter = readFilterFromFile(file);</span><br><span class="line">System.out.println(<span class="hljs-string">"bitSize: "</span> + bloomFilter.bitSize);</span><br><span class="line">System.out.println(<span class="hljs-string">"hashFunctionCount: "</span> + bloomFilter.hashFunctionCount);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="hljs-string">"start --- "</span> + System.currentTimeMillis());</span><br><span class="line"><span class="hljs-keyword">int</span> existCount = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, size = <span class="hljs-number">10</span> * <span class="hljs-number">10000</span>; i &lt; size; i++) &#123;</span><br><span class="line">String msg = <span class="hljs-string">"时间：2018-10-01 10:00:00， 源IP：10.1.1.12，目标IP：192.1.1.205， 攻击类型：ddos攻击 -- "</span> + i;</span><br><span class="line">msg += System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (bloomFilter.check(msg)) &#123;</span><br><span class="line">existCount++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="hljs-string">"end --- "</span> + System.currentTimeMillis());</span><br><span class="line">System.out.println(existCount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="布隆过滤器—应用"><a href="#布隆过滤器—应用" class="headerlink" title="布隆过滤器—应用"></a>布隆过滤器—应用</h4><hr><p>常见的几个应用场景：<br>（1）网页爬虫对URL的去重，避免爬取相同URL地址<br>（2）反垃圾邮件，从数十亿个垃圾邮件列表中判断某邮箱是否垃圾邮箱（同理，垃圾短信）<br>（3）缓存击穿，将已存在的缓存放到布隆中，当黑客访问不存在的缓存时迅速返回避免缓存及DB挂掉 </p><h4 id="布隆过滤器—公式推导"><a href="#布隆过滤器—公式推导" class="headerlink" title="布隆过滤器—公式推导"></a>布隆过滤器—公式推导</h4><hr><p>预估要存的数据量为：n<br>期望的误判率为：P<br>Bit数组的大小为：m<br>Hash函数的个数为：k<br><strong>推导过程：</strong><br>1）对某一特定bit位在一个元素由某特定hash函数插入时没有被置为1的概率为：<br><img src="/images/machine-learning/bloomfilter/03.png"><br>2）则k个hash函数都没有将其置为1概率为：<br><img src="/images/machine-learning/bloomfilter/04.png"><br>3）如果插入了n个元素，都未将其置为1的概率为：<br><img src="/images/machine-learning/bloomfilter/05.png"><br>4）反过来，则此位被置为1的概率为：<br><img src="/images/machine-learning/bloomfilter/06.png"><br>5）一个不在集合中的元素，被误判在集合中的概率：<br><img src="/images/machine-learning/bloomfilter/07.png"><br>6）根据自然常数公式： lim(1+1/x)^x, x→∞，得出：<br><img src="/images/machine-learning/bloomfilter/08.png"><br>7）k为何值时可以使得误判率最低。设误判率为k的函数：<br><img src="/images/machine-learning/bloomfilter/09.png"><br>8）设：<br><img src="/images/machine-learning/bloomfilter/10.png"><br>9）则简化为：<br><img src="/images/machine-learning/bloomfilter/11.png"><br>10）两边取对数：<br><img src="/images/machine-learning/bloomfilter/12.png"><br>11）两边对k求导：<br><img src="/images/machine-learning/bloomfilter/13.png"><br>12）下面求最值：<br><img src="/images/machine-learning/bloomfilter/14.png"><br>==&gt;<br><img src="/images/machine-learning/bloomfilter/15.png"><br>==&gt;<br><img src="/images/machine-learning/bloomfilter/16.png"><br>==&gt;<br><img src="/images/machine-learning/bloomfilter/17.png"><br>==&gt;<br><img src="/images/machine-learning/bloomfilter/18.png"><br>==&gt;<br><img src="/images/machine-learning/bloomfilter/19.png"><br>==&gt;<br><img src="/images/machine-learning/bloomfilter/20.png"><br>==&gt;<br>则误判率最低时，得出k值：<br><img src="/images/machine-learning/bloomfilter/21.png"><br>13）把k代入误判率公式，得出：<br><img src="/images/machine-learning/bloomfilter/22.png"><br>14）把k代入误判率公式，得出m值：<br><img src="/images/machine-learning/bloomfilter/23.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;算法背景&quot;&gt;&lt;a href=&quot;#算法背景&quot; class=&quot;headerlink&quot; title=&quot;算法背景&quot;&gt;&lt;/a&gt;算法背景&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问题：&lt;/strong&gt;&lt;br&gt;在开发中，经常要判断一个元素是否在一个集合中。&lt;br&gt;**&lt;br&gt;实现方案：**&lt;br&gt;编程中通常使用集合来存储所有元素，然后通过hash值来确定元素是否存在。&lt;br&gt;如：java中的HashMap、HashSet等。&lt;br&gt;&lt;strong&gt;优点：&lt;/strong&gt;快速准确&lt;br&gt;&lt;strong&gt;缺点：&lt;/strong&gt;耗费存储空间&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>朴素贝叶斯</title>
    <link href="http://yoursite.com/2018/09/02/%E5%88%86%E7%B1%BB-%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    <id>http://yoursite.com/2018/09/02/分类-朴素贝叶斯/</id>
    <published>2018-09-02T02:15:05.000Z</published>
    <updated>2018-09-08T12:22:15.572Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><hr><p>朴素贝叶斯概率研究的是条件概率，也就是研究的场景是在带有某些前提条件下，或者在某些背景条件的约束下发生的概率问题。</p><a id="more"></a> <h4 id="朴素贝叶斯公式"><a href="#朴素贝叶斯公式" class="headerlink" title="朴素贝叶斯公式"></a>朴素贝叶斯公式</h4><hr><center>**P(A|B) * P(B) = P(B|A) * P(A)**</center><p>P(A)：事件A发生的概率<br>P(B|A)：事件A发生的情况下事件B发生的概率<br>P(B)：事件B发生的概率<br>P(A|B)：事件B发生的情况下事件A发生的概率</p><p>P(A|B) * P(B) = P(B|A) * P(A)，该公式如下图表示：</p><img src="/images/machine-learning/classification/bayes-1.png">左圆圈：A发生的概率右圆圈：B发生的概率中间交集：A和B同时发生的概率<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><hr><img src="/images/machine-learning/classification/bayes-2.png"><br>为了进一步了解这个公式，我们举一个例子：从袋子里面取出一个球，一共取两次，计算一下有多少可能性。**解：**假设有两个事件A和B：A=取出蓝球B=取出红球第一次取出蓝球的概率是2/5，我们把这个概率叫P(A)，然后在A发生的情况下，再取出一个红球的概率是多少？ 即P(A) * P(B|A)为：<center>(2/5) * (3/4) = 3/10</center>反过来计算：第一次取出红球，第二次取出蓝球。同理，P(B)为3/5，P(A|B)为2/4。即P(B) * P(A|B)为：<center>(3/5) * (2/4) = 3/10</center>符合公式： P(A|B) * P(B) = P(B|A) * P(A)<h4 id="贝叶斯算法的使用"><a href="#贝叶斯算法的使用" class="headerlink" title="贝叶斯算法的使用"></a>贝叶斯算法的使用</h4><hr><p>例子：疾病（高血压）预测<br>根据基因片段信息预测患有高血压的概率。这个预测过程也是一个分类过程，训练样本是大量的个体基因信息和个人疾病信息。通过建模分析，得到一个基因片段和患有疾病之间的概率转换关系。<br>如下表：<br><img src="/images/machine-learning/classification/bayes-3.png"></p><p>问题：如果有一个用户来做基因测试，测试结果的基因片段G1、G2分别为1、0，那么他患有高血压疾病的概率是多少？<br><strong>解：</strong><br>事件A：患高血压<br>事件B：基因片段G1、G2分别为1、0<br>那么要求的是事件B发生的条件下事件A发生的概率，也就是P(A|B)。<br>根据贝叶斯公式：P(A|B) * P(B) = P(B|A) * P(A)<br>得出：<br>P(A|B) = (P(B|A) * P(A)) / P(B)<br>根据样本数据求得：<br>P(A)) = 3/10<br>P(B|A) = 1/3<br>P(B) = 3/10<br>代入得出：<br>P(A|B) = (1/3 * 3/10) / (3/10) = 1/3</p><h4 id="Spark中使用朴素贝叶斯算法"><a href="#Spark中使用朴素贝叶斯算法" class="headerlink" title="Spark中使用朴素贝叶斯算法"></a>Spark中使用朴素贝叶斯算法</h4><hr><p>Spark机器学习算法库提供了朴素贝叶斯算法：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//训练贝叶斯模型</span><br><span class="line"> val model = NaiveBayes.train(trainData)</span><br><span class="line">//预测</span><br><span class="line">val result = model.predict(testData)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;朴素贝叶斯概率研究的是条件概率，也就是研究的场景是在带有某些前提条件下，或者在某些背景条件的约束下发生的概率问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
